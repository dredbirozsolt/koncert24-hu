const express = require('express');
const { getSeoKeywordsSubset } = require('../middleware/navigation');
const router = express.Router();
const { Performer, Partner } = require('../models');
const {
  getActiveCategoriesWithCount,
  getActiveCategoriesWithMetadata,
  canShowPrices,
  enrichPerformersWithMetadata
} = require('./helpers/category-helpers');

/**
 * Helper: Get featured performers (6 random, unique names and categories)
 */
async function getFeaturedPerformers() {
  const allPerformers = await Performer.findAll({
    where: { isActive: true },
    order: [['id', 'ASC']]
  });

  const shuffledPerformers = allPerformers.sort(() => Math.random() - 0.5);

  const seenNames = new Set();
  const seenCategories = new Set();
  const featuredPerformers = [];

  for (const performer of shuffledPerformers) {
    if (!seenNames.has(performer.name)
        && !seenCategories.has(performer.category)
        && featuredPerformers.length < 6) {
      seenNames.add(performer.name);
      seenCategories.add(performer.category);
      featuredPerformers.push(performer);
    }
  }

  return featuredPerformers;
}

/**
 * Helper: Get homepage partners
 */
async function getHomepagePartners() {
  return await Partner.findAll({
    where: {
      showOnHomepage: true,
      status: 'active'
    },
    order: [['displayOrder', 'ASC']],
    limit: 6
  });
}

// F≈ëoldal - Rendezv√©nyszervez√©s
router.get('/', async (req, res) => {
  try {
    const { sequelize } = require('../config/database');

    const featuredPerformers = await getFeaturedPerformers();
    const homepagePartners = await getHomepagePartners();

    const showPrice = canShowPrices(req);
    const featuredPerformersWithPrice = enrichPerformersWithMetadata(featuredPerformers, showPrice);

    // Get all unique styles from database
    const performers = await Performer.findAll({
      attributes: ['style'],
      where: {
        style: { [sequelize.Sequelize.Op.ne]: null },
        isActive: true
      },
      raw: true
    });

    // Extract and flatten all styles
    const stylesSet = new Set();
    performers.forEach((p) => {
      if (p.style && Array.isArray(p.style)) {
        p.style.forEach((style) => stylesSet.add(style));
      }
    });

    // Convert to array and sort
    const styles = Array.from(stylesSet).sort();

    // Map styles to emoji icons
    const styleIconMap = {
      Pop: 'üé§',
      Rock: 'üé∏',
      Retro: 'üï∫',
      Mulat√≥s: 'üé∫',
      'Party zenekar': 'üéâ',
      Influencer: 'üì±',
      Sz√≠nh√°z: 'üé≠',
      Dj: 'üéß',
      M≈±sorvezet≈ë: 'üéôÔ∏è',
      Egy√©b: 'üåà',
      Acapella: 'üë•',
      T√°ncprodukci√≥: 'üíÉ',
      Gyermekm≈±sor: 'üß∏',
      Tribute: 'üé∂',
      'Musical - Operett': 'üéµ',
      'Folk - World - Country': 'ü™ó',
      'Rap - Hip-Hop - Trap': 'üé§',
      'Jazz - Blues - Swing': 'üé∑',
      'Stand-up - Humor': 'üòÇ'
    };

    // Create styles array with metadata
    const stylesWithMetadata = styles.map((style) => ({
      name: style,
      icon: styleIconMap[style] || 'üé§',
      slug: style.toLowerCase()
        .normalize('NFD')
        .replace(/[\u0300-\u036f]/g, '')
        .replace(/\s+/g, '-')
        .replace(/[^a-z0-9-]/g, ''),
      urlParam: encodeURIComponent(style)
    }));

    res.render('event-planning', {
      title: 'Rendezv√©nyszervez√©s - Koncert24.hu',
      description: 'Komplett rendezv√©nyszervez√©si szolg√°ltat√°s. '
        + 'Tal√°ld meg √©s foglald le a t√∂k√©letes el≈ëad√≥t, zenekart vagy DJ-t rendezv√©nyedre.',
      featuredPerformers: featuredPerformersWithPrice,
      homepagePartners,
      styles: stylesWithMetadata,
      success: req.query.success,
      error: req.query.error
    });
  } catch (error) {
    req.log.error('Error loading event planning page:', error);
    res.status(500).render('error', {
      title: 'Hiba',
      message: 'Nem siker√ºlt bet√∂lteni az oldalt',
      statusCode: 500
    });
  }
});

/**
 * GET /alternative2 - Modern booking homepage with wizard
 */
router.get('/alternative2', async (req, res) => {
  try {
    const { sequelize } = require('../config/database');

    // Get all unique styles from database
    const performers = await Performer.findAll({
      attributes: ['style'],
      where: {
        style: { [sequelize.Sequelize.Op.ne]: null },
        isActive: true
      },
      raw: true
    });

    // Extract and flatten all styles
    const stylesSet = new Set();
    performers.forEach((p) => {
      if (p.style && Array.isArray(p.style)) {
        p.style.forEach((style) => stylesSet.add(style));
      }
    });

    // Convert to array and sort
    const styles = Array.from(stylesSet).sort();

    // Map styles to emoji icons
    const styleIconMap = {
      Pop: 'üé§',
      Rock: 'üé∏',
      Retro: 'üï∫',
      Mulat√≥s: 'üé∫',
      'Party zenekar': 'üéâ',
      Influencer: 'üì±',
      Sz√≠nh√°z: 'üé≠',
      Dj: 'üéß',
      M≈±sorvezet≈ë: 'üéôÔ∏è',
      Egy√©b: 'üåà',
      Acapella: 'üë•',
      T√°ncprodukci√≥: 'üíÉ',
      Gyermekm≈±sor: 'üß∏',
      Tribute: 'üé∂',
      'Musical - Operett': 'üéµ',
      'Folk - World - Country': 'ü™ó',
      'Rap - Hip-Hop - Trap': 'üé§',
      'Jazz - Blues - Swing': 'üé∑',
      'Stand-up - Humor': 'üòÇ'
    };

    // Create styles array with metadata
    const stylesWithMetadata = styles.map((style) => ({
      name: style,
      icon: styleIconMap[style] || 'ÔøΩ',
      slug: style.toLowerCase()
        .normalize('NFD')
        .replace(/[\u0300-\u036f]/g, '')
        .replace(/\s+/g, '-')
        .replace(/[^a-z0-9-]/g, ''),
      urlParam: encodeURIComponent(style)
    }));

    res.render('alternative2', {
      title: 'Tal√°ld meg √©s foglald le a t√∂k√©letes el≈ëad√≥t - Koncert24.hu',
      description: '√çrd le az esem√©nyed param√©tereit, √©s 24 √≥r√°n bel√ºl aj√°nlatot kapsz. '
        + '1200+ fell√©p√©s √©vente, √°tl√°that√≥ √°rak, jogtiszta szerz≈ëd√©s.',
      styles: stylesWithMetadata
    });
  } catch (error) {
    req.log.error('Error loading alternative2 page:', error);
    res.status(500).render('error', {
      title: 'Hiba',
      message: 'Nem siker√ºlt bet√∂lteni az oldalt',
      statusCode: 500
    });
  }
});

module.exports = router;
