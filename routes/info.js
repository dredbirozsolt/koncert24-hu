const express = require('express');
const router = express.Router();
const logger = require('../config/logger');
const seoService = require('../services/seoService');
const settingsService = require('../services/settingsService');
const { FaqCategory, FaqItem } = require('../models');

// R√≥lunk
router.get('/rolunk', async (req, res) => {
  const companyName = await settingsService.getCompanyName();
  res.render('info/about', {
    title: `R√≥lunk - ${companyName}`,
    pageDescription: `Ismerje meg a ${companyName}-t - t√∂bb √©vtizedes tapasztalat a rendezv√©nyszervez√©s ter√ºlet√©n.`
  });
});

// El≈ëad√≥knak
router.get('/eloadoknak', async (req, res) => {
  const companyName = await settingsService.getCompanyName();
  res.render('info/for-performers', {
    title: `El≈ëad√≥knak - ${companyName}`,
    pageDescription: 'Csatlakozzon el≈ëad√≥ink k√∂z√©! Inform√°ci√≥k m≈±v√©szeknek √©s el≈ëad√≥knak.'
  });
});

// Megrendel≈ëknek
router.get('/megrendeloknek', async (req, res) => {
  const companyName = await settingsService.getCompanyName();
  res.render('info/for-clients', {
    title: `Megrendel≈ëknek - ${companyName}`,
    pageDescription: 'Inform√°ci√≥k megrendel≈ëknek - hogyan m≈±k√∂dik a foglal√°si folyamat, mit v√°rhat t≈ël√ºnk.'
  });
});

// Adatkezel√©si t√°j√©koztat√≥
router.get('/adatkezeles', async (req, res) => {
  const companyName = await settingsService.getCompanyName();
  res.render('info/privacy', {
    title: `Adatkezel√©si t√°j√©koztat√≥ - ${companyName}`,
    pageDescription: `${companyName} adatkezel√©si t√°j√©koztat√≥ja - hogyan kezelj√ºk az √ñn szem√©lyes adatait.`
  });
});

// GYIK - Gyakran Ism√©telt K√©rd√©sek
router.get('/gyik', async (req, res) => {
  try {
    // FAQ kateg√≥ri√°k √©s item-ek lek√©r√©se az adatb√°zisb√≥l
    const categories = await FaqCategory.findAll({
      where: { isActive: true },
      order: [['displayOrder', 'ASC']],
      include: [{
        model: FaqItem,
        as: 'items',
        where: { isActive: true },
        required: false,
        order: [['displayOrder', 'ASC']]
      }]
    });

    // √Åtalak√≠t√°s a view √°ltal v√°rt form√°tumra
    const faqs = categories.map((cat) => ({
      title: cat.name,
      icon: cat.icon || 'üìå',
      questions: cat.items.map((item) => ({
        question: item.question,
        answer: item.answer,
        keywords: item.keywords || ''
      }))
    }));

    // SEO meta tagek gener√°l√°sa
    const companyName = await settingsService.getCompanyName();
    const faqDescription = 'V√°laszok a leggyakoribb k√©rd√©sekre a koncertszervez√©sr≈ël, el≈ëad√≥k foglal√°s√°r√≥l, '
      + `√°rakr√≥l √©s technikai r√©szletekr≈ël. Minden, amit tudnia kell a ${companyName} szolg√°ltat√°sair√≥l.`;
    const faqKeywords = ['gyik', 'gyakori k√©rd√©sek', 'koncertszervez√©s', 'el≈ëad√≥ foglal√°s', '√°rak', 'szerz≈ëd√©s'];

    const domain = await settingsService.get('general.domain');

    const metaTags = seoService.generateMetaTags({
      title: 'Gyakran Ism√©telt K√©rd√©sek (GYIK)',
      description: faqDescription,
      keywords: faqKeywords,
      url: `${domain}/info/gyik`
    });

    // FAQ Schema.org struktur√°lt adat gener√°l√°sa
    const allQuestions = await FaqItem.getAllForSchema();
    const faqSchema = seoService.generateFAQSchema(allQuestions);

    const faqPageDescription = 'V√°laszok a leggyakoribb k√©rd√©sekre a koncertszervez√©sr≈ël, '
      + 'el≈ëad√≥k foglal√°s√°r√≥l, √°rakr√≥l √©s technikai r√©szletekr≈ël.';

    res.render('info/faq', {
      title: 'Gyakran Ism√©telt K√©rd√©sek (GYIK)',
      pageDescription: faqPageDescription,
      metaTags,
      faqSchema,
      faqs
    });
  } catch (error) {
    logger.error('Error rendering FAQ page:', error);
    res.status(500).render('error', {
      title: 'Hiba t√∂rt√©nt',
      message: 'Hiba t√∂rt√©nt a GYIK oldal bet√∂lt√©se sor√°n.',
      error: process.env.NODE_ENV === 'development' ? error : {}
    });
  }
});

module.exports = router;
