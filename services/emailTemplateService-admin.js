/**
 * Email Template Service - Admin Email Generators
 * Handles admin and cron error email template generation
 */

/* eslint-disable max-len -- Email templates contain long HTML strings */

/**
 * Generate cron error email template
 * @param {Object} data - Template data
 * @param {Object} helpers - Template helper functions
 * @returns {Object} { subject, html, text }
 */
function generateCronErrorEmail(data, helpers) {
  const {
    renderHeader,
    renderInfoBox,
    renderBadge,
    renderAlertBox,
    renderCodeBlock,
    renderFooter,
    renderBaseLayout,
    COLORS
  } = helpers;

  const {
    cronJobName,
    errorMessage,
    stackTrace,
    additionalData = {},
    timestamp,
    emailMethod,
    siteName,
    companyName = 'DMF Art M√©dia Kft.'
  } = data;

  const subject = `üö® Cron Job Hiba - ${cronJobName}`;

  // Header
  const headerHtml = renderHeader({
    title: 'Cron Job Hiba',
    subtitle: `${siteName} Rendszer`,
    emoji: 'üö®',
    variant: 'error'
  });

  // Info Box
  const infoItems = [
    { label: 'Cron Job', value: cronJobName },
    { label: 'Id≈ëpont', value: timestamp },
    { label: 'Email m√≥dszer', value: renderBadge({ text: emailMethod.toUpperCase(), variant: 'info' }) }
  ];

  if (additionalData.jobId) {
    infoItems.push({ label: 'Job ID', value: additionalData.jobId });
  }

  if (additionalData.schedule) {
    infoItems.push({ label: '√útemez√©s', value: additionalData.schedule });
  }

  const infoBoxHtml = renderInfoBox({
    title: 'üìã Hiba Inform√°ci√≥k',
    items: infoItems,
    variant: 'info'
  });

  // Error Alert Box
  const errorBoxHtml = renderAlertBox({
    title: '‚ö†Ô∏è Hiba √ºzenet:',
    message: errorMessage || 'Ismeretlen hiba t√∂rt√©nt',
    variant: 'error'
  });

  // Stack Trace (if available)
  const stackTraceHtml = stackTrace ? renderCodeBlock({
    title: 'üîç Stack Trace:',
    code: stackTrace,
    variant: 'gray'
  }) : '';

  // Additional Data (if available)
  const additionalDataHtml = Object.keys(additionalData).length > 0 ? renderCodeBlock({
    title: 'üìä Tov√°bbi Adatok:',
    code: JSON.stringify(additionalData, null, 2),
    variant: 'primary'
  }) : '';

  // Suggestion Box
  const suggestionHtml = `
    <p style="
      margin-top: 30px;
      padding: 15px;
      background: ${COLORS.primary[50]};
      border-radius: 5px;
      border-left: 4px solid ${COLORS.primary[600]};
    ">
      üí° <strong>Javasolt teend≈ë:</strong> Ellen≈ërizze a rendszer logokat
      √©s a cron job konfigur√°ci√≥t a hiba ok√°nak azonos√≠t√°s√°hoz.
    </p>
  `;

  // Content
  const contentHtml = `
    <h2 style="margin-top: 0;">Kedves Adminisztr√°tor!</h2>
    <p>Az egyik automatikus feladat (cron job) hib√°ra futott a rendszerben.</p>
    ${infoBoxHtml}
    ${errorBoxHtml}
    ${stackTraceHtml}
    ${additionalDataHtml}
    ${suggestionHtml}
  `;

  // Footer
  const footerHtml = renderFooter({ siteName, companyName });

  // HTML Email
  const html = renderBaseLayout({
    title: 'Cron Job Hiba',
    headerHtml,
    contentHtml,
    footerHtml
  });

  // Text Email (fallback)
  const text = `
üö® CRON JOB HIBA - ${cronJobName}

${siteName} Rendszer

Kedves Adminisztr√°tor!

Az egyik automatikus feladat (cron job) hib√°ra futott a rendszerben.

üìã Hiba Inform√°ci√≥k:
- Cron Job: ${cronJobName}
- Id≈ëpont: ${timestamp}
- Email m√≥dszer: ${emailMethod.toUpperCase()}
${additionalData.jobId ? `- Job ID: ${additionalData.jobId}` : ''}
${additionalData.schedule ? `- √útemez√©s: ${additionalData.schedule}` : ''}

‚ö†Ô∏è Hiba √ºzenet:
${errorMessage || 'Ismeretlen hiba t√∂rt√©nt'}

${stackTrace ? `üîç Stack Trace:\n${stackTrace}\n` : ''}
${Object.keys(additionalData).length > 0 ? `üìä Tov√°bbi Adatok:\n${JSON.stringify(additionalData, null, 2)}\n` : ''}
üí° Javasolt teend≈ë: Ellen≈ërizze a rendszer logokat √©s a cron job konfigur√°ci√≥t a hiba ok√°nak azonos√≠t√°s√°hoz.

---
¬© ${new Date().getFullYear()} ${siteName}
Ez egy automatikus √©rtes√≠t√©s a rendszerb≈ël.
  `.trim();

  return { subject, html, text };
}

/**
 * Generate admin test email template
 * @param {Object} data - Template data
 * @param {Object} helpers - Template helper functions
 * @returns {Object} { subject, html, text }
 */
function generateAdminTestEmail(data, helpers) {
  const {
    renderHeader,
    renderInfoBox,
    renderBadge,
    renderFooter,
    renderBaseLayout,
    COLORS
  } = helpers;

  const {
    adminEmail,
    emailMethod,
    timestamp,
    siteName,
    companyName
  } = data;

  const subject = `üîß Admin √ârtes√≠t√©si Teszt - ${siteName}`;

  // Header
  const headerHtml = renderHeader({
    title: 'Admin Email Teszt',
    subtitle: 'Rendszer √ârtes√≠t√©si Teszt',
    emoji: 'üîß',
    variant: 'info'
  });

  // Info Box
  const infoBoxHtml = renderInfoBox({
    title: 'üìã Rendszer Inform√°ci√≥k',
    items: [
      { label: 'Teszt id≈ëpontja', value: timestamp },
      { label: 'Email c√≠m', value: adminEmail },
      { label: 'C√©lja', value: 'Kritikus hib√°k √©s rendszeresem√©nyek' },
      {
        label: 'Email m√≥dszer',
        value: renderBadge({
          text: emailMethod.toUpperCase(),
          variant: emailMethod.toLowerCase() === 'oauth2' ? 'success' : 'info'
        })
      }
    ],
    variant: 'info'
  });

  // Success message
  const successHtml = `
    <p style="
      padding: 15px;
      background: ${COLORS.success[50]};
      border-radius: 5px;
      border-left: 4px solid ${COLORS.success[600]};
      color: ${COLORS.success[800]};
      margin: 20px 0;
    ">
      ‚úÖ <strong>Ha ezt az emailt megkapta, az admin email konfigur√°ci√≥ t√∂k√©letesen m≈±k√∂dik!</strong>
    </p>
  `;

  // Content
  const contentHtml = `
    <h2 style="margin-top: 0;">Kedves Adminisztr√°tor!</h2>
    <p>Ez egy teszt email az admin √©rtes√≠t√©si rendszer m≈±k√∂d√©s√©nek ellen≈ërz√©s√©re.</p>
    ${infoBoxHtml}
    ${successHtml}
  `;

  // Footer
  const footerHtml = renderFooter({ siteName: `${siteName} - ${companyName}` });

  // HTML Email
  const html = renderBaseLayout({
    title: 'Admin Email Teszt',
    headerHtml,
    contentHtml,
    footerHtml
  });

  // Text Email (fallback)
  const text = `
Admin Email Teszt

Kedves Adminisztr√°tor!

Ez egy teszt email az admin √©rtes√≠t√©si rendszer m≈±k√∂d√©s√©nek ellen≈ërz√©s√©re.

Rendszer inform√°ci√≥k:
- Teszt id≈ëpontja: ${timestamp}
- Email c√≠m: ${adminEmail}
- C√©lja: Kritikus hib√°k √©s rendszeresem√©nyek
- Email m√≥dszer: ${emailMethod.toUpperCase()}

Ha ezt az emailt megkapta, az admin email konfigur√°ci√≥ t√∂k√©letesen m≈±k√∂dik!

¬© ${new Date().getFullYear()} ${siteName} - ${companyName}
  `.trim();

  return { subject, html, text };
}

module.exports = {
  generateCronErrorEmail,
  generateAdminTestEmail
};
