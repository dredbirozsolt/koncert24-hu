<div class="page-container">

    <% if (messages && messages.success) { %>
        <div class="alert alert-success"><%= messages.success %></div>
    <% } %>
    <% if (messages && messages.error) { %>
        <div class="alert alert-error"><%= messages.error %></div>
    <% } %>

    <div class="admin-two-col">
        <!-- Main Content -->
        <div>
            <!-- Legfontosabb Statisztik√°k -->
            <div class="card--data">
                <h3>üìä Legfontosabb Statisztik√°k</h3>
                <div class="stats-grid">
                    <div class="card--stat card--stat--primary">
                        <h3>üïê Utols√≥ 24 √≥ra</h3>
                        <div class="stat-value"><%= stats.last24h.toLocaleString() %></div>
                        <small class="opacity-70">√∂sszes esem√©ny</small>
                    </div>
                    <div class="card--stat card--stat--error">
                        <h3>üö® Kritikus</h3>
                        <div class="stat-value"><%= stats.critical.toLocaleString() %></div>
                        <small class="opacity-70">kritikus esem√©nyek</small>
                    </div>
                    <div class="card--stat card--stat--warning">
                        <h3>‚ö†Ô∏è Magas</h3>
                        <div class="stat-value"><%= stats.high.toLocaleString() %></div>
                        <small class="opacity-70">magas s√∫lyoss√°g</small>
                    </div>
                    <div class="card--stat card--stat--info">
                        <h3>üîê Z√°rolt Fi√≥kok</h3>
                        <div class="stat-value"><%= stats.accountLocked || 0 %></div>
                        <small class="opacity-70">fi√≥k z√°rol√°s</small>
                    </div>
                    <div class="card--stat card--stat--warning">
                        <h3>üíâ SQL Injection</h3>
                        <div class="stat-value"><%= stats.sqlInjection || 0 %></div>
                        <small class="opacity-70">t√°mad√°si k√≠s√©rlet</small>
                    </div>
                    <div class="card--stat card--stat--warning">
                        <h3>‚ö° XSS K√≠s√©rlet</h3>
                        <div class="stat-value"><%= stats.xss || 0 %></div>
                        <small class="opacity-70">XSS t√°mad√°s</small>
                    </div>
                    <div class="card--stat card--stat--info">
                        <h3>ÔøΩ Rate Limit</h3>
                        <div class="stat-value"><%= stats.rateLimit || 0 %></div>
                        <small class="opacity-70">t√∫l sok k√©r√©s</small>
                    </div>
                    <div class="card--stat card--stat--warning">
                        <h3>ü§ñ Bot Detekt√°lt</h3>
                        <div class="stat-value"><%= stats.botDetected || 0 %></div>
                        <small class="opacity-70">gyan√∫s user agent</small>
                    </div>
                </div>
            </div>

            <!-- Sz≈±r≈ëk -->
            <div class="card--data card--filter">
                <h3>
                    üîç Sz≈±r√©si Opci√≥k
                </h3>
                <form method="GET" action="<%= basePath %>admin/security-log" id="filterForm">
                    <div class="filter-grid">
                        <div class="form__group">
                            <label class="form__label">S√∫lyoss√°g</label>
                            <select name="severity" class="form__control">
                                <option value="">√ñsszes</option>
                                <option value="critical" <%= filters.severity === 'critical' ? 'selected' : '' %>>Kritikus</option>
                                <option value="high" <%= filters.severity === 'high' ? 'selected' : '' %>>Magas</option>
                                <option value="medium" <%= filters.severity === 'medium' ? 'selected' : '' %>>K√∂zepes</option>
                                <option value="low" <%= filters.severity === 'low' ? 'selected' : '' %>>Alacsony</option>
                            </select>
                        </div>
                        <div class="form__group">
                            <label class="form__label">Esem√©ny T√≠pus</label>
                                <select name="eventType" class="form__control">
                                <option value="">√ñsszes</option>
                                <% eventTypes.forEach(type => { %>
                                    <option value="<%= type %>" <%= filters.eventType === type ? 'selected' : '' %>>
                                        <%= eventTypeLabels[type] || type %>
                                    </option>
                                <% }) %>
                            </select>
                        </div>
                        <div class="form__group">
                            <label class="form__label">IP Keres√©s</label>
                            <input type="text" name="searchIp" class="form__control" value="<%= filters.searchIp || '' %>" placeholder="pl. 192.168.1.1">
                        </div>
                        <div class="form__group">
                            <label class="form__label">Kezd≈ë D√°tum</label>
                            <input type="date" name="startDate" class="form__control" value="<%= filters.startDate || '' %>">
                        </div>
                        <div class="form__group">
                            <label class="form__label">Z√°r√≥ D√°tum</label>
                            <input type="date" name="endDate" class="form__control" value="<%= filters.endDate || '' %>">
                        </div>
                        <div class="form__group">
                            <label class="form__label">Limit</label>
                            <select name="limit" class="form__control">
                                <option value="25" <%= pagination.limit == 25 ? 'selected' : '' %>>25</option>
                                <option value="50" <%= pagination.limit == 50 ? 'selected' : '' %>>50</option>
                                <option value="100" <%= pagination.limit == 100 ? 'selected' : '' %>>100</option>
                                <option value="200" <%= pagination.limit == 200 ? 'selected' : '' %>>200</option>
                            </select>
                        </div>
                    </div>
                    <div class="btn__group btn__group--equal">
                        <button type="submit" class="btn btn--primary">
                            üîç Sz≈±r√©s
                        </button>
                        <button type="button" onclick="resetFilters()" class="btn btn--secondary">
                            üîÑ Vissza√°ll√≠t√°s
                        </button>
                        <% if (isAdmin) { %>
                            <button type="button" onclick="openClearModal()" class="btn btn-error">
                                üóëÔ∏è R√©gi Logok T√∂rl√©se
                            </button>
                        <% } %>
                    </div>
                </form>
            </div>

            <!-- Log T√°bla -->
            <div class="card--data">
                <h3>
                    üìã Biztons√°gi Esem√©nyek
                </h3>
                <div class="table--responsive" id="logsTableContainer">
                    <% if (logs.length === 0) { %>
                        <div id="noLogsMessage">
                            ‚ÑπÔ∏è <p>Nincs megjelen√≠thet≈ë esem√©ny</p>
                            <p>Pr√≥b√°lj meg m√°s sz≈±r√©si be√°ll√≠t√°sokat</p>
                        </div>
                    <% } else { %>
                        <div class="table--responsive">
                            <table class="table table-hover" id="logsTable">
                                <thead>
                                    <tr>
                                        <th>Id≈ëpont</th>
                                        <th>S√∫lyoss√°g</th>
                                        <th>Esem√©ny</th>
                                        <th>IP</th>
                                        <th>M≈±velet</th>
                                    </tr>
                                </thead>
                                <tbody id="logsTableBody">
                                <% logs.forEach(log => { %>
                                    <% 
                                        const dateObj = new Date(log.createdAt);
                                        const year = dateObj.getFullYear();
                                        const month = String(dateObj.getMonth() + 1).padStart(2, '0');
                                        const day = String(dateObj.getDate()).padStart(2, '0');
                                        const datePart = `${year}. ${month}. ${day}.`;
                                        const timePart = dateObj.toLocaleTimeString('hu-HU', {hour: '2-digit', minute: '2-digit'});
                                    %>
                                    <tr>
                                        <td><%= datePart %><br><%= timePart %></td>
                                        <td>
                                            <% if (log.severity === 'critical') { %>
                                                <span class="badge badge-error">Kritikus</span>
                                            <% } else if (log.severity === 'high') { %>
                                                <span class="badge badge-warning">Magas</span>
                                            <% } else if (log.severity === 'medium') { %>
                                                <span class="badge badge-info">K√∂zepes</span>
                                            <% } else { %>
                                                <span class="badge badge-success">Alacsony</span>
                                            <% } %>
                                        </td>
                                        <td><%= eventTypeLabels[log.eventType] || log.eventType %></td>
                                        <td><%= log.ipAddress || '-' %></td>
                                        <td>
                                            <button class="btn btn--primary btn-view-details" data-log-id="<%= log.id %>">R√©szletek</button>
                                        </td>
                                    </tr>
                                <% }) %>
                            </tbody>
                        </table>
                        </div>
                    <% } %>
                </div>
            </div>

            <!-- Lapoz√°s -->
            <div id="paginationContainer">
                <% if (pagination.totalPages > 1) { %>
                    <div class="pagination">
                        <% if (pagination.page > 1) { %>
                            <button class="btn btn--secondary" onclick="loadLogs(<%= pagination.page - 1 %>)">
                                ‚Üê El≈ëz≈ë
                            </button>
                        <% } else { %>
                            <button class="btn btn--secondary invisible">
                                ‚Üê El≈ëz≈ë
                            </button>
                        <% } %>
                        
                        <span class="pagination-info">
                            <%= pagination.page %> / <%= pagination.totalPages %> oldal
                            (√ñsszesen: <%= pagination.total.toLocaleString() %> esem√©ny)
                        </span>
                        
                        <% if (pagination.page < pagination.totalPages) { %>
                            <button class="btn btn--secondary" onclick="loadLogs(<%= pagination.page + 1 %>)">
                                K√∂vetkez≈ë ‚Üí
                            </button>
                        <% } else { %>
                            <button class="btn btn--secondary invisible">
                                K√∂vetkez≈ë ‚Üí
                            </button>
                        <% } %>
                    </div>
                <% } %>
            </div>
        </div>

        <!-- Sidebar -->
        <div>
            <!-- Mi az a Security Log? -->
            <div class="card--data">
                <h3 >
                    ‚ùì Mi az a Security Log?
                </h3>
                <div class="card__info-content">
                    <p>A biztons√°gi napl√≥ r√∂gz√≠ti az √∂sszes biztons√°ggal kapcsolatos esem√©nyt a rendszerben.</p>
                    <ul>
                        <li>Bejelentkez√©si k√≠s√©rletek</li>
                        <li>Jelsz√≥ v√°ltoztat√°sok</li>
                        <li>Biztons√°gi incidensek</li>
                        <li>T√°mad√°si k√≠s√©rletek (XSS, SQL injection)</li>
                        <li>Rate limit t√∫ll√©p√©sek</li>
                    </ul>
                    <p>
                        Ezek az adatok kritikus fontoss√°g√∫ak a rendszer biztons√°g√°nak monitoroz√°s√°hoz.
                    </p>
                </div>
            </div>

            <!-- S√∫lyoss√°gi Szintek -->
            <div class="card--data">
                <h3 >
                    ‚ö†Ô∏è S√∫lyoss√°gi Szintek
                </h3>
                <div class="card__info-content">
                    <div>
                        <strong class="text-error">üî¥ Kritikus:</strong>
                        <p>Azonnali beavatkoz√°st ig√©nyl≈ë esem√©ny (pl. SQL injection k√≠s√©rlet)</p>
                    </div>
                    <div>
                        <strong class="text-warning">üü° Magas:</strong>
                        <p>Komoly biztons√°gi agg√°ly (pl. t√∂bbsz√∂ri sikertelen bejelentkez√©s)</p>
                    </div>
                    <div>
                        <strong class="text-info">üîµ K√∂zepes:</strong>
                        <p>M√©rs√©kelt agg√°ly (pl. gyan√∫s User Agent)</p>
                    </div>
                    <div>
                        <strong class="text-success">üü¢ Alacsony:</strong>
                        <p>Inform√°ci√≥s esem√©ny (pl. sikeres bejelentkez√©s)</p>
                    </div>
                </div>
            </div>

            <!-- Sz≈±r√©si Tippek -->
            <div class="card--data">
                <h3 >
                    üí° Sz≈±r√©si Tippek
                </h3>
                <div class="card__info-content">
                    <p><strong>IP c√≠m keres√©s:</strong></p>
                    <p>R√©szleges IP c√≠mekkel is kereshetsz (pl. "192.168" minden 192.168.x.x c√≠met megtal√°l)</p>
                    
                    <p><strong>D√°tum sz≈±r√©s:</strong></p>
                    <p>Haszn√°lj d√°tum tartom√°nyt specifikus id≈ëszak vizsg√°lat√°hoz</p>
                    
                    <p><strong>Kombin√°lt sz≈±r√©s:</strong></p>
                    <p>T√∂bb sz≈±r≈ë egy√ºttes haszn√°lata prec√≠zebb eredm√©nyeket ad</p>
                </div>
            </div>

            <!-- R√©gi Logok T√∂rl√©se -->
            <div class="card--data">
                <h3 >
                    üóëÔ∏è R√©gi Logok T√∂rl√©se
                </h3>
                <div class="card__info-content">
                    <p><strong class="text-error">‚ö†Ô∏è Admin funkci√≥</strong></p>
                    <p>Csak adminisztr√°torok t√∂r√∂lhetnek logokat.</p>
                    
                    <p><strong>Mi ker√ºl t√∂rl√©sre:</strong></p>
                    <p>A megadott napsz√°mn√°l r√©gebbi √∂sszes biztons√°gi esem√©ny</p>
                    
                    <p><strong>Figyelem:</strong></p>
                    <p>A t√∂rl√©s visszaford√≠thatatlan m≈±velet! Gondold √°t alaposan.</p>
                </div>
            </div>

            <!-- Biztons√°gi V√©delem √ñsszefoglal√≥ja -->
            <div class="card--data">
                <h3>
                    üõ°Ô∏è Biztons√°gi V√©delem √ñsszefoglal√≥ja
                </h3>
                <div class="card__info-content">
                    <p>Az al√°bbi v√©delmek akt√≠vak a rendszerben:</p>
                </div>
            </div>

            <!-- Auth Protection Card -->
            <div class="card--data">
                <h3>üîê Bejelentkez√©s & Regisztr√°ci√≥</h3>
                <ul class="m-0 pl-4">
                    <li>Rate limit: 5/15min (login)</li>
                    <li>Rate limit: 3/1√≥ra (reg.)</li>
                    <li>Bot detekci√≥ (UA check)</li>
                    <li>5 honeypot mez≈ë</li>
                    <li>SQL injection v√©delem</li>
                    <li>XSS v√©delem</li>
                </ul>
                <p class="mt-3"><strong>R√©tegek:</strong> 6 üõ°Ô∏è</p>
            </div>

            <!-- Chat Protection Card -->
            <div class="card--data">
                <h3>üí¨ Chat Rendszer</h3>
                <ul class="m-0 pl-4">
                    <li>Session limit: 3/15min</li>
                    <li>Message limit: 20/1min</li>
                    <li>Offline limit: 2/1√≥ra</li>
                    <li>5 honeypot mez≈ë</li>
                    <li>Spam pattern detekci√≥</li>
                    <li>Auto-cleanup (30min)</li>
                </ul>
                <p class="mt-3"><strong>R√©tegek:</strong> 9 üõ°Ô∏è</p>
            </div>

            <!-- Password & Security Card -->
            <div class="card--data">
                <h3>üîë Jelsz√≥ & Adatbiztons√°g</h3>
                <ul class="m-0 pl-4">
                    <li>Bcrypt hash (rounds: 12)</li>
                    <li>Reset limit: 3/1√≥ra</li>
                    <li>Email verification</li>
                    <li>Dual email v√°ltoztat√°s</li>
                    <li>Session management</li>
                    <li>Email √©rtes√≠t√©sek</li>
                </ul>
                <p class="mt-3"><strong>Szint:</strong> Magas üîí</p>
            </div>

            <!-- General Security Card -->
            <div class="card--data">
                <h3>‚öôÔ∏è √Åltal√°nos V√©delem</h3>
                <ul class="m-0 pl-4">
                    <li>HTTPS titkos√≠t√°s</li>
                    <li>Express-session secure</li>
                    <li>CSRF token v√©delem</li>
                    <li>Input valid√°ci√≥ (minden form)</li>
                    <li>Sequelize ORM (SQL safe)</li>
                    <li>Error handling & logging</li>
                </ul>
                <p class="mt-3"><strong>St√°tusz:</strong> Akt√≠v ‚úÖ</p>
            </div>

            <!-- File Upload Security Card -->
            <div class="card--data">
                <h3>üìé File Upload V√©delem</h3>
                <ul class="m-0 pl-4">
                    <li>Magic bytes valid√°ci√≥</li>
                    <li>40+ vesz√©lyes kiterjeszt√©s</li>
                    <li>SecurityLog integr√°ci√≥</li>
                    <li>Auto cleanup s√©r√ºlt f√°jlok</li>
                    <li>5 route 100% v√©dett</li>
                    <li>Real-time monitoring</li>
                </ul>
                <p class="mt-3"><strong>R√©tegek:</strong> 3 üõ°Ô∏è</p>
            </div>
        </div>
    </div>

</div> <!-- /.page-container -->

<style>
    /* Security log table date column styling */
    #logsTable th:first-child,
    #logsTable td:first-child {
        min-width: 80px;
        white-space: nowrap;
        text-align: center;
    }
    
    #logsTable td:first-child {
        line-height: 1.4;
        padding-top: 8px;
        padding-bottom: 8px;
    }
    
    /* Reduce table cell padding for more compact layout */
    #logsTable th,
    #logsTable td {
        padding-left: 8px;
        padding-right: 8px;
    }
</style>

<!-- Hidden data container for safe JSON passing (base64 encoded) -->
<script type="application/json" id="logs-data" data-encoded="true">
<%= Buffer.from(JSON.stringify(logs)).toString('base64') %>
</script>

<script src="/js/design-system/modal.js"></script>
<script>
    const csrfToken = '<%= csrfToken %>';
    const basePath = '<%= basePath %>';
    const eventTypeLabels = <%- JSON.stringify(eventTypeLabels) %>;
    let currentPage = <%= pagination.page %>;
    let currentFilters = {
        severity: '<%= filters.severity || "" %>',
        eventType: '<%= filters.eventType || "" %>',
        searchIp: '<%= filters.searchIp || "" %>',
        startDate: '<%= filters.startDate || "" %>',
        endDate: '<%= filters.endDate || "" %>',
        limit: <%= pagination.limit %>
    };
    
    // HTML escape helper
    function escapeHtml(text) {
        const map = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#039;'
        };
        return String(text).replace(/[&<>"']/g, (m) => map[m]);
    }
    
    // Modal cleanup helper
    function cleanupModals() {
        // Remove all existing modal overlays and backdrops
        const overlays = document.querySelectorAll('.modal-overlay, .modal-backdrop');
        overlays.forEach(el => el.remove());
        
        // Remove modal-open class from body
        document.body.classList.remove('modal-open');
    }
    
    // Initial load - render server data
    document.addEventListener('DOMContentLoaded', function() {
        // Parse logs from base64 encoded data attribute
        const logsData = document.getElementById('logs-data');
        let initialLogs = [];
        
        if (logsData) {
            try {
                const isEncoded = logsData.getAttribute('data-encoded') === 'true';
                const rawData = logsData.textContent.trim();
                
                if (isEncoded) {
                    // Decode base64 and parse JSON
                    const decodedData = atob(rawData);
                    initialLogs = JSON.parse(decodedData);
                } else {
                    initialLogs = JSON.parse(rawData);
                }
            } catch (e) {
                console.error('Failed to parse logs data:', e);
                initialLogs = [];
            }
        }
        
        renderLogs(initialLogs, {
            page: <%= pagination.page %>,
            totalPages: <%= pagination.totalPages %>,
            total: <%= pagination.total %>
        });
        
        // Attach event listeners to detail buttons
        attachDetailButtonListeners();
    });
    
    // Filter form AJAX handler
    document.getElementById('filterForm').addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const formData = new FormData(this);
        currentFilters = {
            severity: formData.get('severity') || '',
            eventType: formData.get('eventType') || '',
            searchIp: formData.get('searchIp') || '',
            startDate: formData.get('startDate') || '',
            endDate: formData.get('endDate') || '',
            limit: parseInt(formData.get('limit')) || 25
        };
        currentPage = 1; // Reset to first page on new filter
        
        await loadLogs(1);
    });
    
    // Load logs with AJAX
    async function loadLogs(page) {
        currentPage = page;
        
        // Build query params
        const params = new URLSearchParams({
            ...currentFilters,
            page: page
        });
        
        // Remove empty params
        for (let [key, value] of [...params.entries()]) {
            if (!value) params.delete(key);
        }
        
        try {
            // Show loading state
            document.getElementById('logsTableContainer').style.opacity = '0.5';
            
            const response = await fetch(`${basePath}admin/security-log/data?${params.toString()}`, {
                method: 'GET',
                headers: {
                    'Accept': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                }
            });
            
            const data = await response.json();
            
            if (response.ok && data.success) {
                renderLogs(data.logs, data.pagination);
                renderPagination(data.pagination);
            } else {
                throw new Error(data.message || 'Hiba t√∂rt√©nt az adatok bet√∂lt√©se sor√°n');
            }
        } catch (error) {
            console.error('Error loading logs:', error);
            alert('‚ùå Hiba: ' + error.message);
        } finally {
            document.getElementById('logsTableContainer').style.opacity = '1';
        }
    }
    
    // Render logs table
    function renderLogs(logs, pagination) {
        const container = document.getElementById('logsTableContainer');
        
        if (logs.length === 0) {
            container.innerHTML = `
                <div id="noLogsMessage">
                    ‚ÑπÔ∏è <p>Nincs megjelen√≠thet≈ë esem√©ny</p>
                    <p>Pr√≥b√°lj meg m√°s sz≈±r√©si be√°ll√≠t√°sokat</p>
                </div>
            `;
            return;
        }
        
        const tbody = document.getElementById('logsTableBody');
        if (!tbody) {
            // Create table if it doesn't exist
            container.innerHTML = `
                <table class="data-table" id="logsTable">
                    <thead>
                        <tr>
                            <th>Id≈ëpont</th>
                            <th>S√∫lyoss√°g</th>
                            <th>Esem√©ny</th>
                            <th>IP</th>
                            <th>M≈±velet</th>
                        </tr>
                    </thead>
                    <tbody id="logsTableBody"></tbody>
                </table>
            `;
        }
        
        const tableBody = document.getElementById('logsTableBody');
        tableBody.innerHTML = logs.map(log => {
            const dateObj = new Date(log.createdAt);
            const year = dateObj.getFullYear();
            const month = String(dateObj.getMonth() + 1).padStart(2, '0');
            const day = String(dateObj.getDate()).padStart(2, '0');
            const datePart = `${year}. ${month}. ${day}.`;
            const timePart = dateObj.toLocaleTimeString('hu-HU', {
                hour: '2-digit',
                minute: '2-digit'
            });
            const formattedDate = `${datePart}<br>${timePart}`;
            
            let severityBadge = '';
            if (log.severity === 'critical') {
                severityBadge = '<span class="badge badge-error">Kritikus</span>';
            } else if (log.severity === 'high') {
                severityBadge = '<span class="badge badge-warning">Magas</span>';
            } else if (log.severity === 'medium') {
                severityBadge = '<span class="badge badge-info">K√∂zepes</span>';
            } else {
                severityBadge = '<span class="badge badge-success">Alacsony</span>';
            }
            
            return `
                <tr>
                    <td>${formattedDate}</td>
                    <td>${severityBadge}</td>
                    <td>${eventTypeLabels[log.eventType] || log.eventType}</td>
                    <td>${log.ipAddress || '-'}</td>
                    <td>
                        <button class="btn btn--primary btn-view-details" data-log-id="${log.id}">R√©szletek</button>
                    </td>
                </tr>
            `;
        }).join('');
        
        // Reattach event listeners
        attachDetailButtonListeners();
    }
    
    // Render pagination
    function renderPagination(pagination) {
        const container = document.getElementById('paginationContainer');
        
        if (pagination.totalPages <= 1) {
            container.innerHTML = '';
            return;
        }
        
        container.innerHTML = `
            <div class="pagination">
                ${pagination.page > 1 ? `
                    <button class="btn btn--secondary" onclick="loadLogs(${pagination.page - 1})">
                        ‚Üê El≈ëz≈ë
                    </button>
                ` : `
                    <button class="btn btn--secondary invisible">
                        ‚Üê El≈ëz≈ë
                    </button>
                `}
                
                <span class="pagination-info">
                    ${pagination.page} / ${pagination.totalPages} oldal
                    (√ñsszesen: ${pagination.total.toLocaleString()} esem√©ny)
                </span>
                
                ${pagination.page < pagination.totalPages ? `
                    <button class="btn btn--secondary" onclick="loadLogs(${pagination.page + 1})">
                        K√∂vetkez≈ë ‚Üí
                    </button>
                ` : `
                    <button class="btn btn--secondary invisible">
                        K√∂vetkez≈ë ‚Üí
                    </button>
                `}
            </div>
        `;
    }
    
    // Attach event listeners to detail buttons
    function attachDetailButtonListeners() {
        document.querySelectorAll('.btn-view-details').forEach(btn => {
            btn.addEventListener('click', function() {
                const logId = this.getAttribute('data-log-id');
                viewDetails(logId);
            });
        });
    }
    
    // Reset filters
    function resetFilters() {
        // Reset form
        document.getElementById('filterForm').reset();
        
        // Reset current filters
        currentFilters = {
            severity: '',
            eventType: '',
            searchIp: '',
            startDate: '',
            endDate: '',
            limit: 25
        };
        currentPage = 1;
        
        // Load logs with empty filters
        loadLogs(1);
    }
    
    // URL params alerts
    const urlParams = new URLSearchParams(window.location.search);
    const deleted = urlParams.get('deleted');
    const days = urlParams.get('days');
    const error = urlParams.get('error');
    
    if (deleted && days) {
        Modal.alert({
            title: 'Siker',
            message: `${deleted} r√©gi biztons√°gi log t√∂r√∂lve (r√©gebbi mint ${days} nap)`,
            type: 'success'
        });
    }
    if (error === 'clear_failed') {
        Modal.alert({
            title: 'Hiba',
            message: 'Hiba t√∂rt√©nt a logok t√∂rl√©se sor√°n',
            type: 'error'
        });
    }

    // Clear old logs modal
    function openClearModal() {
        // Clean up any existing modals first
        cleanupModals();
        
        const formHTML = `
            <div id="clearLogsForm">
                <div class="form__group">
                    <label class="form__label">Napok sz√°ma</label>
                    <input type="number" id="clearDays" class="form__control" min="1" value="90" required>
                    <small class="form__hint">Enn√©l r√©gebbi logok t√∂rl√©sre ker√ºlnek</small>
                </div>
            </div>
        `;
        
        const footer = `
            <button type="button" class="btn btn--secondary modal-clear-cancel">M√©gse</button>
            <button type="button" class="btn btn-error modal-clear-submit">T√∂rl√©s</button>
        `;
        
        const modal = Modal.create({
            title: 'R√©gi Biztons√°gi Logok T√∂rl√©se',
            content: formHTML,
            footer: footer,
            size: 'sm'
        });
        
        modal.open();
        
        // Bind buttons
        setTimeout(() => {
            const cancelBtn = modal.modalElement.querySelector('.modal-clear-cancel');
            const submitBtn = modal.modalElement.querySelector('.modal-clear-submit');
            
            if (cancelBtn) {
                cancelBtn.addEventListener('click', () => modal.close());
            }
            
            if (submitBtn) {
                submitBtn.addEventListener('click', async () => {
                    const days = document.getElementById('clearDays').value;
                    
                    if (!days || days < 1) {
                        alert('K√©rlek adj meg egy √©rv√©nyes napsz√°mot!');
                        return;
                    }
                    
                    submitBtn.disabled = true;
                    submitBtn.textContent = 'T√∂rl√©s...';
                    
                    try {
                        const response = await fetch(`${basePath}admin/security-log/clear-old`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'X-CSRF-Token': csrfToken
                            },
                            body: JSON.stringify({ days: parseInt(days) })
                        });
                        
                        const data = await response.json();
                        
                        if (response.ok && data.success) {
                            modal.close();
                            showAlert('success', data.message || 'R√©gi logok sikeresen t√∂r√∂lve!');
                            setTimeout(() => location.reload(), 1000);
                        } else {
                            throw new Error(data.message || 'Hiba t√∂rt√©nt a t√∂rl√©s sor√°n');
                        }
                    } catch (error) {
                        alert('‚ùå Hiba: ' + error.message);
                        submitBtn.disabled = false;
                        submitBtn.textContent = 'T√∂rl√©s';
                    }
                });
            }
        }, 0);
    }

    // View details modal
    async function viewDetails(id) {
        // Clean up any existing modals first
        cleanupModals();
        
        // Create loading modal
        const modal = Modal.create({
            title: 'Esem√©ny R√©szletei',
            content: '<div class="text-center"><p>Bet√∂lt√©s...</p></div>',
            footer: '<button type="button" class="btn btn--primary modal-details-close">Bez√°r√°s</button>',
            size: 'md'
        });
        
        modal.open();
        
        try {
            const fetchUrl = `${basePath}admin/security-log/${id}`;
            const response = await fetch(fetchUrl);
            const data = await response.json();
            
            if (data.success) {
                const log = data.log;
                
                // Biztons√°gos JSON megjelen√≠t√©s
                let detailsHtml = '-';
                if (typeof log.details === 'object' && log.details !== null) {
                    try {
                        const detailsStr = JSON.stringify(log.details, null, 2);
                        detailsHtml = `<pre class="log-details-pre">${escapeHtml(detailsStr)}</pre>`;
                    } catch (e) {
                        detailsHtml = '<em>Hib√°s JSON form√°tum</em>';
                    }
                } else if (log.details) {
                    detailsHtml = escapeHtml(String(log.details));
                }
                
                const content = `
                    <div class="log-details-content">
                        <p><strong>ID:</strong> ${log.id}</p>
                        <p><strong>Id≈ëpont:</strong> ${new Date(log.createdAt).toLocaleString('hu-HU')}</p>
                        <p><strong>S√∫lyoss√°g:</strong> ${log.severity}</p>
                        <p><strong>Esem√©ny T√≠pus:</strong> ${escapeHtml(eventTypeLabels[log.eventType] || log.eventType)}</p>
                        <p><strong>R√©szletek:</strong></p>
                        ${detailsHtml}
                        <p><strong>IP C√≠m:</strong> ${escapeHtml(log.ipAddress || '-')}</p>
                        <p><strong>User Agent:</strong></p>
                        <pre class="log-details-pre">${escapeHtml(log.userAgent || '-')}</pre>
                        ${log.userId ? `<p><strong>User ID:</strong> ${log.userId}</p>` : ''}
                    </div>
                `;
                
                modal.setContent(content);
            } else {
                modal.setContent('<p class="text-error">Hiba: Az esem√©ny nem tal√°lhat√≥</p>');
            }
        } catch (error) {
            console.error('Security log details fetch error:', error);
            modal.setContent('<p class="text-error">Hiba t√∂rt√©nt az adatok bet√∂lt√©se sor√°n</p>');
        }
        
        // Bind close button
        setTimeout(() => {
            const closeBtn = modal.modalElement.querySelector('.modal-details-close');
            if (closeBtn) {
                closeBtn.addEventListener('click', () => modal.close());
            }
        }, 0);
    }

    // Glob√°lis el√©rhet≈ëv√© t√©tel
    window.viewDetails = viewDetails;
    window.openClearModal = openClearModal;

    // Event listeners
    document.addEventListener('DOMContentLoaded', function() {
        const detailButtons = document.querySelectorAll('.btn-view-details');
        
        detailButtons.forEach(button => {
            button.addEventListener('click', function() {
                const logId = this.getAttribute('data-log-id');
                viewDetails(logId);
            });
        });
    });
</script>

</div> <!-- /.container -->
