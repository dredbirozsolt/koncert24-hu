<!-- Logs Page - 2 Column Layout -->
<!-- Using Design System -->


<div class="page-container">
    <% if (messages && messages.success) { %>
        <div class="alert alert-success"><%= messages.success %></div>
    <% } %>
    <% if (messages && messages.error) { %>
        <div class="alert alert-error"><%= messages.error %></div>
    <% } %>

    <div class="admin-two-col">
        <!-- Bal oldal: Log Management -->
        <div>
            <!-- 1. Log Be√°ll√≠t√°sok -->
            <div class="card--data">
                <h3 class="section-title">
                    ‚öôÔ∏è Log Be√°ll√≠t√°sok
                </h3>
                
                <form id="log-settings-form">
                    <div class="form__group">
                        <label for="retentionDays" class="form__label">
                            Meg≈ërz√©si Id≈ë (nap)
                        </label>
                        <input 
                            type="number" 
                            id="retentionDays" 
                            name="retentionDays"
                            class="form__control"
                            value="<%= settings.retentionDays %>"
                            min="1"
                            max="365"
                            required
                        >
                        <small class="form__hint">Ennyi napn√°l r√©gebbi logok automatikusan t√∂rl≈ëdnek naponta hajnali 2:00-kor</small>
                    </div>
                    
                    <div class="btn__group btn__group--equal mt-4">
                        <button type="button" class="btn btn--warning" onclick="manualLogCleanup()">
                            üßπ R√©gi Logok T√∂rl√©se
                        </button>
                    </div>
                </form>
            </div>

            <!-- 2. Log F√°jlok -->
            <div class="card--data">
                <h3 class="section-title">
                    üìÑ Log F√°jlok
                </h3>
                
                <div class="table--responsive">
                    <table class="table table-hover" id="log-files-table">
                        <thead>
                            <tr>
                                <th>F√°jln√©v</th>
                                <th>M√©ret</th>
                                <th>M√≥dos√≠tva</th>
                                <th class="text-center">M≈±veletek</th>
                            </tr>
                        </thead>
                        <tbody id="log-files">
                            <tr>
                                <td colspan="4" class="text-center text-secondary">
                                    ‚è≥ Log f√°jlok bet√∂lt√©se...
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>

                <div class="log-filters filter-grid-inline grid-cols-5">
                    <div class="form__group">
                        <label>&nbsp;</label>
                        <select id="level-filter" class="form__select">
                            <option value="all">√ñsszes szint</option>
                            <option value="info">INFO</option>
                            <option value="warn">WARN</option>
                            <option value="error">ERROR</option>
                        </select>
                    </div>
                    <div class="form__group">
                        <label>&nbsp;</label>
                        <input type="text" id="search-box" class="form__control" placeholder="Keres√©s...">
                    </div>
                </div>
                
                <div class="btn__group btn__group--equal mt-3">
                    <button class="btn btn--primary" onclick="applyFilters()">
                        üîç Sz≈±r√©s
                    </button>
                    <button class="btn btn--secondary" onclick="clearFilters()">
                        ‚úñÔ∏è T√∂rl√©s
                    </button>
                    <button class="btn btn--secondary" onclick="refreshLogs()">
                        üîÑ Friss√≠t√©s
                    </button>
                </div>
            </div>

            <!-- 3. Log Viewer -->
            <div class="card--data">
                <h3 class="section-title" id="log-header">
                    üëÅÔ∏è V√°lasszon egy log f√°jlt
                </h3>
                
                <div id="log-content" class="log-viewer">
                    <div class="log-viewer-empty">
                        Kattintson egy log f√°jlra a tartalom megjelen√≠t√©s√©hez.
                    </div>
                </div>
            </div>
        </div>

        <!-- Jobb oldal: Info Panels -->
        <div>
            <!-- Log Szintek -->
            <div class="card--data">
                <h3>
                    üìö Log Szintek
                </h3>
                
                <div class="card__info-content">
                    <div class="level-badge info">
                        <strong>INFO</strong><br>
                        Norm√°l m≈±k√∂d√©s, inform√°ci√≥s √ºzenetek. Nincs probl√©ma.
                    </div>
                    
                    <div class="level-badge warn">
                        <strong>WARN</strong><br>
                        Figyelmeztet≈ë √ºzenetek. M≈±k√∂dik, de √©rdemes figyelni.
                    </div>
                    
                    <div class="level-badge error">
                        <strong>ERROR</strong><br>
                        Hiba t√∂rt√©nt. Azonnali figyelmet ig√©nyel!
                    </div>
                </div>
            </div>

            <!-- Keres√©si Tippek -->
            <div class="card--data">
                <h3>
                    üîç Keres√©si Tippek
                </h3>
                
                <div class="card__info-content">
                    <p>
                        <strong>üîç Keres√©s:</strong><br>
                        √çrj be b√°rmilyen sz√≥t vagy kifejez√©st a log tartalm√°ban val√≥ keres√©shez.
                    </p>
                    
                    <p>
                        <strong>üéØ Szint sz≈±r√©s:</strong><br>
                        V√°laszd ki, hogy csak INFO, WARN vagy ERROR szint≈± bejegyz√©seket l√°ss.
                    </p>
                    
                    <p>
                        <strong>‚ö° Enter billenty≈±:</strong><br>
                        A keres≈ëmez≈ëben nyomd meg az Enter-t a gyors keres√©shez.
                    </p>
                </div>
            </div>

            <!-- Log Rot√°ci√≥ Be√°ll√≠t√°sok -->
            <div class="card--data">
                <h3>
                    ‚öôÔ∏è Log Rot√°ci√≥ (.env)
                </h3>
                
                <div class="card__info-content">
                    <p>
                        <strong>üìã Infrastrukt√∫ra be√°ll√≠t√°sok:</strong><br>
                        A log rot√°ci√≥ √©s f√°jlm√©ret a <code>.env</code> f√°jlban konfigur√°lhat√≥. Ezek NEM szerkeszthet≈ëk az admin fel√ºleten (ipari standard).
                    </p>
                    
                    <p>
                        <strong>üîß K√∂rnyezeti v√°ltoz√≥k:</strong>
                    </p>
                    <ul>
                        <li><code>LOG_MAX_SIZE</code> - Max f√°jlm√©ret (jelenleg: 50M)</li>
                        <li><code>LOG_ROTATION_INTERVAL</code> - √öj f√°jl id≈ëk√∂z (jelenleg: 1d - naponta)</li>
                        <li><code>LOG_COMPRESS</code> - Gzip t√∂m√∂r√≠t√©s (jelenleg: false)</li>
                    </ul>
                    
                    <p>
                        <strong>‚ö†Ô∏è Szerver √∫jraind√≠t√°s sz√ºks√©ges:</strong><br>
                        Ezek a be√°ll√≠t√°sok csak szerver √∫jraind√≠t√°s ut√°n l√©pnek √©rv√©nybe.
                    </p>
                </div>
            </div>
            
            <!-- Meg≈ërz√©s √©s Tiszt√≠t√°s -->
            <div class="card--data">
                <h3>
                    üßπ Meg≈ërz√©s √©s Tiszt√≠t√°s
                </h3>
                
                <div class="card__info-content">
                    <p>
                        <strong>üéØ Meg≈ërz√©si id≈ë be√°ll√≠t√°sa:</strong><br>
                        A fenti "Meg≈ërz√©si Id≈ë (nap)" mez≈ë hat√°rozza meg, hogy h√°ny napn√°l r√©gebbi logok t√∂rl≈ëdjenek. 
                        Ez az √©rt√©k <strong>azonnal √©rv√©nybe l√©p</strong> ment√©s ut√°n, adatb√°zisban t√°rol√≥dik.
                    </p>
                    
                    <p>
                        <strong>‚è∞ Automatikus tiszt√≠t√°s:</strong><br>
                        A rendszer naponta √©jjel <strong>2:00</strong>-kor automatikusan t√∂rli a r√©gi log f√°jlokat (Daily Maintenance cron job).
                    </p>
                    
                    <p>
                        <strong>üîß Manu√°lis tiszt√≠t√°s:</strong><br>
                        Haszn√°ld a "üßπ R√©gi Logok T√∂rl√©se" gombot azonnali tiszt√≠t√°shoz v√°rakoz√°s n√©lk√ºl.
                    </p>
                </div>
            </div>

            <!-- Friss√≠t√©s -->
            <div class="card--data">
                <h3>
                    ‚ÑπÔ∏è Friss√≠t√©s
                </h3>
                
                <div class="card__info-content">
                    <p>
                        <strong>üîÑ Automatikus friss√≠t√©s:</strong><br>
                        A kiv√°lasztott log f√°jl tartalma automatikusan friss√ºl 30 m√°sodpercenk√©nt.
                    </p>
                    
                    <p>
                        <strong>‚úã Manu√°lis friss√≠t√©s:</strong><br>
                        Haszn√°ld a "üîÑ Friss√≠t√©s" gombot azonnali friss√≠t√©shez.
                    </p>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
/* Log Viewer Scrollable Container */
#log-content {
    max-height: 600px;
    overflow-y: auto;
    overflow-x: auto;
}

/* Active log file row */
.log-file-row.active {
    background-color: var(--color-primary-light) !important;
}

:root[data-theme="dark"] .log-file-row.active {
    background-color: var(--color-primary-dark) !important;
}

/* Custom Scrollbar for Log Viewer */
#log-content::-webkit-scrollbar {
    width: var(--space-2);
    height: var(--space-2);
}

#log-content::-webkit-scrollbar-track {
    background: var(--color-gray-100);
    border-radius: var(--radius-md);
}

#log-content::-webkit-scrollbar-thumb {
    background: var(--color-gray-300);
    border-radius: var(--radius-md);
}

#log-content::-webkit-scrollbar-thumb:hover {
    background: var(--color-gray-400);
}

/* Dark mode scrollbar */
:root[data-theme="dark"] #log-content::-webkit-scrollbar-track {
    background: var(--color-gray-800);
}

:root[data-theme="dark"] #log-content::-webkit-scrollbar-thumb {
    background: var(--color-gray-600);
}

:root[data-theme="dark"] #log-content::-webkit-scrollbar-thumb:hover {
    background: var(--color-gray-500);
}
</style>

<script>
const csrfToken = '<%= csrfToken %>';
let selectedFile = null;
let originalContent = '';

// ‚úÖ DESIGN SYSTEM: Uses global showAlert() from admin-alerts.js
// No local definition needed - automatically available on all admin pages

// Load log files on page load
document.addEventListener('DOMContentLoaded', function () {
    loadLogFiles();
    
    // Auto-save for number inputs (blur event)
    document.querySelectorAll('#log-settings-form input[type="number"]').forEach(input => {
        input.addEventListener('blur', async (e) => {
            const fieldName = e.target.name;
            const value = e.target.value;
            
            // Validate min/max
            const min = parseInt(e.target.min);
            const max = parseInt(e.target.max);
            const numValue = parseInt(value);
            
            if (numValue < min || numValue > max) {
                showAlert('error', `‚ùå √ârt√©k ${min} √©s ${max} k√∂z√∂tt kell legyen`);
                e.target.value = e.target.defaultValue;
                return;
            }
            
            await saveSingleSetting(fieldName, value);
        });
    });
    
    // Auto-save for select (change event)
    document.querySelectorAll('#log-settings-form select').forEach(select => {
        select.addEventListener('change', async (e) => {
            const fieldName = e.target.name;
            const value = e.target.value;
            await saveSingleSetting(fieldName, value);
        });
    });
});

// Auto-save single setting function
async function saveSingleSetting(fieldName, value) {
    // Only retentionDays can be updated from UI
    const retentionDays = document.getElementById('retentionDays').value;
    
    try {
        const response = await fetch('/admin/logs/settings', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-Token': csrfToken
            },
            body: JSON.stringify({ retentionDays })
        });
        
        const data = await response.json();
        
        if (data.success) {
            showAlert('success', `‚úÖ Meg≈ërz√©si id≈ë sikeresen mentve!`);
        } else {
            showAlert('error', `‚ùå ${data.error || 'Hiba t√∂rt√©nt a ment√©s sor√°n'}`);
        }
    } catch (error) {
        console.error('Save error:', error);
        showAlert('error', '‚ùå H√°l√≥zati hiba t√∂rt√©nt');
    }
}

async function loadLogFiles() {
    try {
        const response = await fetch('/admin/logs/files');
        const data = await response.json();

        const filesContainer = document.getElementById('log-files');

        if (data.success && data.files.length > 0) {
            filesContainer.innerHTML = data.files.map(file => `
                <tr class="log-file-row" onclick="selectLogFile('${file.name}')" class="cursor-pointer">
                    <td>üìÑ ${file.name}</td>
                    <td>${(file.size / 1024).toFixed(1)} KB</td>
                    <td>${new Date(file.modified).toLocaleString('hu-HU')}</td>
                    <td class="text-center">
                        <button 
                            class="btn btn-icon-only btn-error" 
                            onclick="deleteLogFile(event, '${file.name}')" 
                            title="F√°jl t√∂rl√©se"
                        >
                            üóëÔ∏è
                        </button>
                    </td>
                </tr>
            `).join('');
        } else {
            filesContainer.innerHTML = '<tr><td colspan="4" class="text-center text-secondary">Nincsenek el√©rhet≈ë log f√°jlok.</td></tr>';
        }
    } catch (error) {
        console.error('Error loading log files:', error);
        document.getElementById('log-files').innerHTML =
            '<tr><td colspan="4"><div class="alert alert-error">‚ùå Hiba a log f√°jlok bet√∂lt√©sekor: ' + error.message + '</div></td></tr>';
    }
}

async function selectLogFile(filename) {
    // Remove active class from all rows
    document.querySelectorAll('.log-file-row').forEach(row => {
        row.classList.remove('active');
    });

    // Add active class to selected row
    event.currentTarget.classList.add('active');

    selectedFile = filename;
    document.getElementById('log-header').innerHTML = `üëÅÔ∏è ${filename}`;

    await loadLogContent();
}

async function loadLogContent() {
    if (!selectedFile) return;

    const contentEl = document.getElementById('log-content');
    contentEl.innerHTML = '<div class="loading-indicator">‚è≥ Log bet√∂lt√©se...</div>';

    try {
        const level = document.getElementById('level-filter').value;
        const search = document.getElementById('search-box').value.trim();

        const params = new URLSearchParams();
        if (level !== 'all') params.append('level', level);
        if (search) params.append('search', search);

        const response = await fetch(`/admin/logs/content/${encodeURIComponent(selectedFile)}?${params}`);
        const data = await response.json();

        if (data.success) {
            if (data.isStructured && data.entries) {
                renderStructuredLogs(data.entries, contentEl);
            } else {
                originalContent = data.content;
                contentEl.textContent = data.content;
            }

            contentEl.scrollTop = contentEl.scrollHeight;
        } else {
            contentEl.innerHTML = '<div class="alert alert-error">‚ùå Hiba: ' + data.error + '</div>';
        }
    } catch (error) {
        console.error('Error loading log content:', error);
        contentEl.innerHTML = '<div class="alert alert-error">‚ùå Hiba a log tartalom bet√∂lt√©sekor: ' + error.message + '</div>';
    }
}

function renderStructuredLogs(entries, container) {
    if (entries.length === 0) {
        container.innerHTML = '<div class="log-viewer-empty">Nincs megjelen√≠thet≈ë log bejegyz√©s</div>';
        return;
    }

    container.innerHTML = '';
    
    entries.forEach(entry => {
        const logLine = document.createElement('div');
        logLine.className = 'log-entry';
        
        let html = `<span class="log-timestamp">[${entry.timestamp}]</span> `;
        html += `<span class="${entry.levelClass} log-level-bold">${entry.level}</span> `;
        html += `<span>${escapeHtml(entry.message)}</span>`;

        if (entry.details) {
            html += `<div class="log-details-wrapper">`;
            html += `<details class="log-details">`;
            html += `<summary class="log-summary">R√©szletek</summary>`;
            html += `<pre class="log-details-pre">${escapeHtml(JSON.stringify(entry.details, null, 2))}</pre>`;
            html += `</details>`;
            html += `</div>`;
        }

        logLine.innerHTML = html;
        container.appendChild(logLine);
    });
}

function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

function applyFilters() {
    if (selectedFile) {
        loadLogContent();
    }
}

function clearFilters() {
    document.getElementById('search-box').value = '';
    document.getElementById('level-filter').value = 'all';
    if (selectedFile) {
        loadLogContent();
    }
}

function refreshLogs() {
    loadLogFiles();
    if (selectedFile) {
        setTimeout(() => {
            loadLogContent();
        }, 500);
    }
}

// Auto-refresh every 30 seconds
setInterval(() => {
    if (selectedFile) {
        loadLogContent();
    }
}, 30000);

// Enter key support for search
document.getElementById('search-box').addEventListener('keypress', function (e) {
    if (e.key === 'Enter') {
        applyFilters();
    }
});

// Level filter change handler
document.getElementById('level-filter').addEventListener('change', function () {
    if (selectedFile) {
        loadLogContent();
    }
});

// Manual log cleanup function
async function manualLogCleanup() {
    const confirmed = await window.showConfirmModal(
        'R√©gi Logok T√∂rl√©se',
        'Biztosan t√∂r√∂lni szeretn√©d a r√©gi log f√°jlokat?\n\nEz a m≈±velet nem vonhat√≥ vissza.',
        'warning'
    );
    
    if (!confirmed) {
        return;
    }
    
    const btn = event.currentTarget;
    const originalText = btn.innerHTML;
    
    btn.disabled = true;
    btn.innerHTML = 'Tiszt√≠t√°s folyamatban...';
    
    try {
        const response = await fetch('/admin/logs/cleanup', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-Token': csrfToken
            }
        });
        
        const data = await response.json();
        
        if (data.success) {
            showAlert('success', data.message || 'R√©gi logok sikeresen t√∂r√∂lve');
            setTimeout(() => loadLogFiles(), 1500);
        } else {
            showAlert('error', data.error || 'Hiba t√∂rt√©nt a t√∂rl√©s sor√°n');
        }
    } catch (error) {
        console.error('Log cleanup error:', error);
        showAlert('error', error.message || 'H√°l√≥zati hiba t√∂rt√©nt');
    } finally {
        btn.disabled = false;
        btn.innerHTML = originalText;
    }
}

// Delete individual log file
async function deleteLogFile(event, filename) {
    // Stop propagation to prevent selectLogFile from triggering
    event.stopPropagation();
    
    // Show delete confirmation modal
    showDeleteFileModal(filename);
}

// Show delete file modal
function showDeleteFileModal(filename) {
    const modal = document.getElementById('confirmDeleteFileModal');
    const filenameSpan = document.getElementById('deleteFileName');
    filenameSpan.textContent = filename;
    
    modal.style.display = 'flex';
    document.body.classList.add('modal-open');
    
    // Store filename for deletion
    modal.dataset.filename = filename;
    
    // Close on backdrop click
    modal.onclick = function(e) {
        if (e.target === modal) {
            closeDeleteFileModal();
        }
    };
    
    // Close on ESC key
    const escHandler = function(e) {
        if (e.key === 'Escape') {
            closeDeleteFileModal();
            document.removeEventListener('keydown', escHandler);
        }
    };
    document.addEventListener('keydown', escHandler);
}

// Close delete file modal
function closeDeleteFileModal() {
    const modal = document.getElementById('confirmDeleteFileModal');
    modal.style.display = 'none';
    document.body.classList.remove('modal-open');
}

// Confirm and execute file delete
async function confirmFileDelete() {
    const modal = document.getElementById('confirmDeleteFileModal');
    const filename = modal.dataset.filename;
    
    // Close modal
    closeDeleteFileModal();
    
    try {
        const response = await fetch(`/admin/logs/delete/${encodeURIComponent(filename)}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-Token': csrfToken
            }
        });
        
        const data = await response.json();
        
        if (data.success) {
            showAlert('success', `‚úÖ ${data.message}`);
            
            // If deleted file was selected, clear viewer
            if (selectedFile === filename) {
                selectedFile = null;
                document.getElementById('log-header').innerHTML = 'üëÅÔ∏è V√°lasszon egy log f√°jlt';
                document.getElementById('log-content').innerHTML = '<div class="log-viewer-empty">Kattintson egy log f√°jlra a tartalom megjelen√≠t√©s√©hez.</div>';
            }
            
            // Reload file list
            setTimeout(() => {
                loadLogFiles();
            }, 500);
        } else {
            showAlert('error', data.error || 'Hiba t√∂rt√©nt a t√∂rl√©s sor√°n');
        }
    } catch (error) {
        console.error('Delete error:', error);
        showAlert('error', error.message || 'H√°l√≥zati hiba t√∂rt√©nt');
    }
}

// ‚úÖ DESIGN SYSTEM: Uses global showAlert() and showConfirmModal() from design-system/modal.js
// No local modal definition needed - automatically available on all admin pages
</script>

<!-- Design System Delete File Modal (for single file deletions) -->
<div class="modal__backdrop" id="confirmDeleteFileModal" style="display: none;">
    <div class="modal modal-sm modal-confirm">
        <div class="modal__header">
            <h5 class="modal__title">F√°jl T√∂rl√©se</h5>
            <button type="button" class="modal__close" onclick="closeDeleteFileModal()"></button>
        </div>
        <div class="modal__body">
            <div class="modal-confirm-icon icon-warning">
                üóëÔ∏è
            </div>
            <h4 class="modal-confirm-title">Log f√°jl t√∂rl√©se</h4>
            <p class="modal-confirm-message">
                Biztosan t√∂r√∂lni szeretn√©d ezt a f√°jlt:<br>
                <strong id="deleteFileName"></strong>
            </p>
        </div>
        <div class="modal-footer modal-footer-center">
            <button type="button" class="btn btn--secondary" onclick="closeDeleteFileModal()">
                M√©gse
            </button>
            <button type="button" class="btn btn--danger" onclick="confirmFileDelete()">
                T√∂rl√©s
            </button>
        </div>
    </div>
</div>
