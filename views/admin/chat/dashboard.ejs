

<div class="page-container">
  <!-- Statistics -->
  <div class="card--data">
    <h3>Statisztik√°k</h3>
    <div class="stats-grid">
      <div class="card--stat card--stat--primary">
        <h3>Akt√≠v Sessions</h3>
        <div class="stat-value"><%= adminSessions.length %></div>
      </div>

      <div class="card--stat <%= systemStatus.adminChat.adminCount > 0 ? 'card--stat--success' : 'card--stat--warning' %>">
        <h3>üëî Online √ârt√©kes√≠t≈ëk</h3>
        <div class="stat-value"><%= systemStatus.adminChat.adminCount %></div>
      </div>

      <div class="card--stat <%= systemStatus.ai.available ? 'card--stat--success' : 'card--stat--error' %>">
        <h3>ü§ñ AI Szolg√°ltat√°s</h3>
        <div class="stat-value"><%= systemStatus.ai.available ? 'El√©rhet≈ë' : 'Offline' %></div>
      </div>

      <div class="card--stat <%= systemStatus.adminChat.available ? 'card--stat--success' : 'card--stat--warning' %>">
        <h3>üéß √ârt√©kes√≠t≈ëi Chat</h3>
        <div class="stat-value"><%= systemStatus.adminChat.available ? 'El√©rhet≈ë' : 'Offline' %></div>
      </div>
    </div>
  </div>

  <!-- Action Bar -->
  <div class="btn__group btn__group--equal mb-4">
    <button class="btn btn--primary" onclick="location.reload()">
      Friss√≠t√©s
    </button>
  </div>

  <!-- Chat Sessions Table -->
  <div class="card--data">
    <div class="p-0">
      <% if (adminSessions && adminSessions.length > 0) { %>
        <div class="table--responsive">
          <table class="table table-hover">
            <thead>
              <tr>
                <th class="w-24 whitespace-nowrap">Id≈ëpont</th>
                <th class="w-40">Felhaszn√°l√≥</th>
                <th class="w-48">El√©rhet≈ës√©g</th>
                <th class="w-24 text-center">St√°tusz</th>
                <th class="min-w-200">Utols√≥ √úzenet</th>
                <th class="w-32 text-center">M≈±veletek</th>
              </tr>
            </thead>
            <tbody>
              <% adminSessions.forEach(session => { %>
                <tr>
                  <td>
                    <div class="text-sm text-secondary">
                      <% 
                      const timestamp = session.updatedAt || session.createdAt;
                      const date = new Date(timestamp);
                      %>
                      <div class="whitespace-nowrap">
                        <%= date.toLocaleDateString('hu-HU', { 
                          year: 'numeric', 
                          month: 'short', 
                          day: 'numeric'
                        }) %>
                      </div>
                      <div class="whitespace-nowrap text-xs opacity-75">
                        <%= date.toLocaleTimeString('hu-HU', { 
                          hour: '2-digit',
                          minute: '2-digit'
                        }) %>
                      </div>
                    </div>
                  </td>
                  <td>
                    <div class="user-info">
                      <div class="user-details">
                        <div class="name">
                          <%= session.userName || 'Vend√©g Felhaszn√°l√≥' %>
                        </div>
                      </div>
                    </div>
                  </td>
                  <td>
                    <div class="contact-info">
                      <% if (session.userEmail) { %>
                        <div class="contact-item">
                          <span><%= session.userEmail %></span>
                        </div>
                      <% } %>
                      <% if (session.userPhone) { %>
                        <div class="contact-item">
                          <span><%= session.userPhone %></span>
                        </div>
                      <% } %>
                      <% if (!session.userEmail && !session.userPhone) { %>
                        <span class="text-muted italic text-sm">
                          ‚ûñ Nincs megadva
                        </span>
                      <% } %>
                    </div>
                  </td>
                  <td>
                    <% 
                      let badgeClass = 'badge-secondary';
                      let statusText = session.status;
                      let statusIcon = 'üîµ';
                      if (session.status === 'active') {
                        badgeClass = 'badge-success';
                        statusText = 'Akt√≠v';
                        statusIcon = '';
                      } else if (session.status === 'escalated') {
                        badgeClass = 'badge-warning';
                        statusText = 'Eszkal√°lva';
                        statusIcon = '';
                      } else if (session.status === 'closed') {
                        badgeClass = 'badge-secondary';
                        statusText = 'Lez√°rva';
                        statusIcon = '';
                      }
                    %>
                    <span class="badge <%= badgeClass %>">
                      <%= statusIcon %>
                      <%= statusText %>
                    </span>
                  </td>
                  <td>
                    <% if (session.messages && session.messages.length > 0) { %>
                      <div class="message-preview">
                        <div class="message-content">
                          <div class="message-text">
                            <%= session.messages[0].content %>
                          </div>
                          <div class="message-meta">
                            <%= session.messages.length %> √ºzenet √∂sszesen
                          </div>
                        </div>
                      </div>
                    <% } else { %>
                      <div class="text-muted italic">
                        üì• M√©g nincs √ºzenet
                      </div>
                    <% } %>
                  </td>
                  <td class="text-center">
                    <button 
                      class="btn btn--primary"
                      onclick="openChatSession(<%= session.id %>)"
                      title="Chat megnyit√°sa"
                    >
                      üí¨ Megnyit√°s
                    </button>
                  </td>
                </tr>
              <% }); %>
            </tbody>
          </table>
        </div>
      <% } else { %>
        <div class="empty-state">
          üì• <p>M√©g nincs akt√≠v chat session</p>
        </div>
      <% } %>
    </div>
  </div>

  <!-- Chat Kezel√©s Inform√°ci√≥k -->
  <div class="card--data mt-4">
    <h3>üí° Fontos Tudnival√≥k - Chat Kezel√©s</h3>
    
    <div class="card__info-grid">
      <div>
        <p><strong>‚è±Ô∏è Session Lej√°rat</strong></p>
        <ul>
          <li><strong>48 √≥ra inaktivit√°s ut√°n</strong> automatikusan t√∂rl≈ëdik a localStorage-b≈ël</li>
          <li><strong>30 nap ut√°n</strong> v√©glegesen t√∂rl≈ëdik az adatb√°zisb√≥l</li>
          <li>Az id≈ë minden √ºzenettel √∫jraindul (lastActivity friss√ºl)</li>
        </ul>
      </div>

      <div>
        <p><strong>ü§ñ Chat M√≥dok</strong></p>
        <ul>
          <li><strong>Full Service:</strong> AI + √ârt√©kes√≠t≈ë (mindkett≈ë el√©rhet≈ë)</li>
          <li><strong>√ârt√©kes√≠t≈ë Only:</strong> Csak √©rt√©kes√≠t≈ë v√°laszol (AI offline)</li>
          <li><strong>AI Only:</strong> Csak AI v√°laszol (nincs online √©rt√©kes√≠t≈ë)</li>
          <li><strong>Offline Mode:</strong> √úzenet hagy√°s (email form)</li>
        </ul>
      </div>

      <div>
        <p><strong>‚ö° Real-time M≈±k√∂d√©s</strong></p>
        <ul>
          <li><strong>WebSocket kapcsolat:</strong> Automatikus friss√≠t√©s</li>
          <li><strong>√öj √ºzenet:</strong> Azonnal megjelenik mindk√©t f√©ln√©l</li>
          <li><strong>Typing indicator:</strong> "√ârt√©kes√≠t≈ë g√©pel..." jelz√©s</li>
          <li><strong>Unread count:</strong> Piros badge az olvasatlan √ºzeneteken</li>
        </ul>
      </div>

      <div>
        <p><strong>‚úÖ √ârt√©kes√≠t≈ë El√©rhet≈ës√©g</strong></p>
        <ul>
          <li><strong>Online st√°tusz:</strong> Automatikusan be√°ll√≠t√≥dik bejelentkez√©skor</li>
          <li><strong>Offline st√°tusz:</strong> 5 perc inaktivit√°s vagy kil√©p√©s ut√°n</li>
          <li><strong>T√∂bb √©rt√©kes√≠t≈ë:</strong> B√°rmelyik v√°laszolhat ugyanabban a session-ben</li>
        </ul>
      </div>

      <div>
        <p><strong>‚ö†Ô∏è Figyelend≈ë</strong></p>
        <ul>
          <li><strong>Escalated session-√∂k:</strong> Felhaszn√°l√≥ √©rt√©kes√≠t≈ëi seg√≠ts√©get k√©rt</li>
          <li><strong>Olvasatlan √ºzenetek:</strong> Piros badge jelzi</li>
          <li><strong>R√©gi session-√∂k:</strong> 24 √≥r√°n√°l r√©gebbiek ellen≈ërzend≈ëk</li>
          <li><strong>Offline √ºzenetek:</strong> Email-ben √©rkeznek, k√ºl√∂n kezelend≈ëk</li>
        </ul>
      </div>

      <div>
        <p><strong>üì± Mobilbar√°t Chat</strong></p>
        <ul>
          <li><strong>Desktop:</strong> 360√ó500px ablak</li>
          <li><strong>Tablet:</strong> K√∂zpontos√≠tott layout</li>
          <li><strong>Mobile (‚â§480px):</strong> Full-screen (100vh)</li>
          <li><strong>Touch targets:</strong> 44-56px (iOS/Android standard)</li>
        </ul>
      </div>
    </div>
  </div>

  <!-- Bot V√©delem Inform√°ci√≥k -->
  <div class="card--data mt-4">
    <h3>üõ°Ô∏è Bot V√©delem Akt√≠v</h3>
    
    <div class="card__info-grid">
      <div>
        <p><strong>‚è≤Ô∏è Rate Limiting</strong></p>
        <ul>
          <li><strong>Session:</strong> 3 / 15 perc</li>
          <li><strong>√úzenet:</strong> 20 / 1 perc</li>
          <li><strong>Offline:</strong> 2 / 1 √≥ra</li>
        </ul>
      </div>

      <div>
        <p><strong>ü§ñ Bot Sz≈±r√©s</strong></p>
        <ul>
          <li>User Agent blokkol√°s (curl, wget)</li>
          <li>Honeypot mez≈ëk (l√°thatatlan)</li>
          <li>IP blacklist (auto-lej√°rat)</li>
        </ul>
      </div>

      <div>
        <p><strong>üö´ Spam V√©delem</strong></p>
        <ul>
          <li>Ism√©telt √ºzenetek (3+) blokkolva</li>
          <li>URL spam (4+) sz≈±r√©s</li>
          <li>Gyan√∫s kulcsszavak (viagra, casino)</li>
        </ul>
      </div>

      <div>
        <p><strong>üìú Auto-Cleanup</strong></p>
        <ul>
          <li>30 perc inaktivit√°s ‚Üí close</li>
          <li>5 percenk√©nt automatikus check</li>
          <li>9 r√©teg≈± v√©delem √∂sszesen</li>
        </ul>
      </div>
    </div>
  </div>
  </div>
  <!-- End of Info Panels -->

</div>

<script src="/js/design-system/modal.js"></script>

<script>
  let currentSessionId = null;
  let chatModal = null;
  let messageCount = 0;

  // Show alert using Modal.js
  function showAlertModal(message, type = 'info') {
    Modal.alert({
      title: type === 'error' ? 'Hiba' : 
             type === 'success' ? 'Siker' : 
             type === 'warning' ? 'Figyelmeztet√©s' : 'Inform√°ci√≥',
      message: message,
      type: type
    });
  }

  function closeModal() {
    if (chatModal) {
      chatModal.close();
      chatModal = null;
    }
    currentSessionId = null;
    messageCount = 0;
  }

  function openChatSession(sessionId) {
    currentSessionId = sessionId;
    
    // Create modal with loading state
    const footer = `
      <button class="btn btn-error" onclick="closeSession()">
        ‚ùå Besz√©lget√©s lez√°r√°sa
      </button>
      <div class="flex gap-2 flex-1 max-w-600">
        <input 
          type="text" 
          id="salesMessageInput" 
          class="form__control flex-1" 
          placeholder="√çrja be az √ºzenet√©t..."
        >
        <button class="btn btn--primary" onclick="sendSalesMessage()">
          üì§ K√ºld√©s
        </button>
      </div>
    `;
    
    chatModal = Modal.create({
      title: `üí¨ Chat Session #${sessionId}`,
      content: '<div id="chatMessages" class="chat-widget__messages"><div class="text-center p-4 text-muted">‚è≥ Bet√∂lt√©s...</div></div>',
      footer: footer,
      size: 'lg',
      callbacks: {
        onClose: () => {
          currentSessionId = null;
          messageCount = 0;
        }
      }
    });
    
    chatModal.open();
    
    // Load messages
    fetch(`/admin/chat/session/${sessionId}`)
      .then(res => {
        if (!res.ok) {
          throw new Error(`HTTP error! status: ${res.status}`);
        }
        return res.json();
      })
      .then(data => {
        console.log('Session data:', data);
        
        if (!data.success) {
          throw new Error(data.error || 'Failed to load session');
        }
        
        const session = data.session;
        const messages = session.messages || [];
        const isClosed = session.status === 'closed';
        
        // Build messages HTML
        let messagesHTML = '';
        if (messages.length === 0) {
          messagesHTML = '<div class="text-center p-4 text-muted">üì• M√©g nincs √ºzenet ebben a besz√©lget√©sben</div>';
        } else {
          messagesHTML = messages.map(msg => {
            const msgClass = msg.role;
            const content = msg.content || '';
            const createdAt = msg.createdAt || msg.created_at;
            const time = new Date(createdAt).toLocaleTimeString('hu-HU', { 
              hour: '2-digit', 
              minute: '2-digit' 
            });
            
            return `
              <div class="message-bubble ${msgClass}">
                ${content}
                <span class="message-time">${time}</span>
              </div>
            `;
          }).join('');
        }
        
        // Update content
        chatModal.setContent(`<div id="chatMessages" class="chat-widget__messages">${messagesHTML}</div>`);
        
        // Update UI based on session status
        if (isClosed) {
          const messageInput = chatModal.modalElement.querySelector('#salesMessageInput');
          const closeBtn = chatModal.modalElement.querySelector('.btn-error');
          
          if (messageInput) {
            messageInput.disabled = true;
            messageInput.placeholder = 'A besz√©lget√©s lez√°rva';
          }
          if (closeBtn) {
            closeBtn.innerHTML = 'üîí Lez√°rva';
            closeBtn.disabled = true;
            closeBtn.classList.remove('btn-error');
            closeBtn.classList.add('btn--secondary');
          }
        } else {
          // Add Enter key listener to send message (only if session is active)
          const messageInput = chatModal.modalElement.querySelector('#salesMessageInput');
          if (messageInput) {
            messageInput.addEventListener('keypress', function(e) {
              if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendSalesMessage();
              }
            });
          }
        }
        
        // Scroll to bottom
        setTimeout(() => {
          const messagesContainer = chatModal.modalElement.querySelector('#chatMessages');
          if (messagesContainer) {
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
          }
        }, 100);
      })
      .catch(err => {
        console.error('Error loading messages:', err);
        chatModal.setContent(`
          <div class="text-center p-4 text-error">
            ‚ö†Ô∏è <p><strong>Hiba t√∂rt√©nt az √ºzenetek bet√∂lt√©sekor</strong></p>
            <p class="text-sm">${err.message}</p>
          </div>
        `);
      });
  }

  function sendSalesMessage() {
    if (!chatModal) {
      showAlertModal('Nincs akt√≠v chat modal!', 'error');
      return;
    }
    
    const input = chatModal.modalElement.querySelector('#salesMessageInput');
    const message = input.value.trim();
    
    if (!message) {
      showAlertModal('K√©rj√ºk, √≠rjon be egy √ºzenetet!', 'warning');
      return;
    }
    
    if (!currentSessionId) {
      showAlertModal('Nincs akt√≠v chat session!', 'error');
      return;
    }
    
    // Disable input while sending
    input.disabled = true;
    
    const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
    fetch('/admin/chat/message/send', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': csrfToken
      },
      body: JSON.stringify({ 
        sessionId: currentSessionId,
        message: message
      })
    })
    .then(res => {
      if (!res.ok) {
        throw new Error(`HTTP error! status: ${res.status}`);
      }
      return res.json();
    })
    .then(data => {
      console.log('Send message response:', data);
      
      if (data.success) {
        input.value = '';
        input.disabled = false;
        input.focus();
        
        // Add message to chat immediately for better UX
        const messagesDiv = chatModal.modalElement.querySelector('#chatMessages');
        const time = new Date().toLocaleTimeString('hu-HU', { 
          hour: '2-digit', 
          minute: '2-digit' 
        });
        
        const messageHtml = `
          <div class="message-bubble admin">
            ${message}
            <span class="message-time">${time}</span>
          </div>
        `;
        
        messagesDiv.insertAdjacentHTML('beforeend', messageHtml);
        
        // Scroll to bottom
        setTimeout(() => {
          if (messagesDiv) {
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
          }
        }, 50);
      } else {
        throw new Error(data.error || 'Failed to send message');
      }
    })
    .catch(err => {
      console.error('Error sending message:', err);
      showAlertModal(`Hiba t√∂rt√©nt az √ºzenet k√ºld√©sekor: ${err.message}`, 'error');
      input.disabled = false;
    });
  }

  // Open confirmation modal
  async function closeSession() {
    if (!currentSessionId) {
      showAlertModal('Nincs akt√≠v chat session!', 'error');
      return;
    }

    // Show confirmation modal using Modal.js
    const confirmed = await Modal.confirm({
      message: `
        <div class="text-center">
          <div class="mb-3">‚ùå</div>
          <p class="text-lg font-semibold mb-2">Biztosan le szeretn√© z√°rni ezt a besz√©lget√©st?</p>
          <p class="text-muted text-sm">A felhaszn√°l√≥ nem tud majd t√∂bb √ºzenetet k√ºldeni.</p>
        </div>
      `,
      confirmText: '‚úì Igen, lez√°rom',
      cancelText: '‚úñÔ∏è M√©gse'
    });
    
    if (!confirmed) {
      return;
    }
    
    // Close session
    const closeBtn = chatModal.modalElement.querySelector('.btn-error');
    if (closeBtn) {
      const originalText = closeBtn.innerHTML;
      closeBtn.disabled = true;
      closeBtn.innerHTML = '‚è≥ Lez√°r√°s...';
    }

    const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
    
    fetch(`/admin/chat/session/${currentSessionId}/close`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': csrfToken
      }
    })
    .then(res => {
      if (!res.ok) {
        throw new Error(`HTTP error! status: ${res.status}`);
      }
      return res.json();
    })
    .then(data => {
      if (data.success) {
        // Show success message in chat
        const messagesDiv = chatModal.modalElement.querySelector('#chatMessages');
        const time = new Date().toLocaleTimeString('hu-HU', { 
          hour: '2-digit', 
          minute: '2-digit' 
        });
        
        const messageHtml = `
          <div class="message-bubble system bg-light text-secondary text-center italic">
            ‚úÖ Besz√©lget√©s lez√°rva
            <span class="message-time">${time}</span>
          </div>
        `;
        
        messagesDiv.insertAdjacentHTML('beforeend', messageHtml);
        
        // Disable message input
        const messageInput = chatModal.modalElement.querySelector('#salesMessageInput');
        if (messageInput) {
          messageInput.disabled = true;
          messageInput.placeholder = 'A besz√©lget√©s lez√°rva';
        }
        
        // Update button
        if (closeBtn) {
          closeBtn.innerHTML = 'üîí Lez√°rva';
          closeBtn.classList.remove('btn-error');
          closeBtn.classList.add('btn--secondary');
        }
        
        // Scroll to bottom
        setTimeout(() => {
          if (messagesDiv) {
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
          }
        }, 100);
        
        // Show success alert
        showAlertModal('Besz√©lget√©s sikeresen lez√°rva!', 'success');
        
        // Reload table after 2 seconds
        setTimeout(() => {
          location.reload();
        }, 2000);
      } else {
        throw new Error(data.error || 'Failed to close session');
      }
    })
    .catch(err => {
      console.error('Error closing session:', err);
      showAlertModal(`Hiba t√∂rt√©nt: ${err.message}`, 'error');
      
      if (closeBtn) {
        closeBtn.disabled = false;
        closeBtn.innerHTML = '‚ùå Besz√©lget√©s lez√°r√°sa';
      }
    });
  }

  // √ârt√©kes√≠t≈ë Heartbeat System
  function sendHeartbeat() {
    fetch('/admin/chat/heartbeat', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    })
    .then(res => res.json())
    .then(data => {
      if (data.success) {
        console.log('‚úÖ Heartbeat sent - √ârt√©kes√≠t≈ë online');
      }
    })
    .catch(err => {
      console.error('‚ùå Heartbeat failed:', err);
    });
  }

  // Send heartbeat immediately when page loads
  sendHeartbeat();

  // Send heartbeat every 30 seconds to keep sales person online
  setInterval(sendHeartbeat, 30000);

  // Poll for new messages in active session
  function pollForNewMessages() {
    // Only poll if there's an active session AND chat modal is open
    if (!currentSessionId || !chatModal) return;
    
    fetch(`/admin/chat/session/${currentSessionId}`)
      .then(res => {
        if (!res.ok) {
          throw new Error(`HTTP ${res.status}`);
        }
        return res.json();
      })
      .then(data => {
        if (data.success) {
          const newMessages = data.session.messages || [];
          
          // Check if there are new messages
          if (newMessages.length > messageCount) {
            // Reload messages
            const messagesDiv = chatModal.modalElement.querySelector('#chatMessages');
            if (messagesDiv) {
              messagesDiv.innerHTML = newMessages.map(msg => {
                let msgClass = msg.role;
                let content = msg.content || '';
                let createdAt = msg.createdAt || msg.created_at;
                let time = new Date(createdAt).toLocaleTimeString('hu-HU', { 
                  hour: '2-digit', 
                  minute: '2-digit' 
                });
                
                return `
                  <div class="message-bubble ${msgClass}">
                    ${content}
                    <span class="message-time">${time}</span>
                  </div>
                `;
              }).join('');
              
              // Auto-scroll to new messages
              setTimeout(() => {
                if (messagesDiv) {
                  messagesDiv.scrollTop = messagesDiv.scrollHeight;
                }
              }, 50);
              
              messageCount = newMessages.length;
            }
          }
        }
      })
      .catch(err => {
        console.error('Poll error:', err);
        // Silent fail - don't spam console if modal is closed
      });
  }

  // Poll every 2 seconds when a session is open
  setInterval(pollForNewMessages, 2000);

  // Reset message count when opening a session
  const originalOpenChatSession = openChatSession;
  openChatSession = function(sessionId) {
    messageCount = 0;
    originalOpenChatSession(sessionId);
  };

  // Auto-refresh page every 2 minutes for dashboard data (session list, stats)
  setInterval(() => {
    // Only reload if chat modal is closed (don't interrupt active chat)
    if (!chatModal || !currentSessionId) {
      location.reload();
    }
  }, 120000);

  // Mark sales person offline when leaving page
  window.addEventListener('beforeunload', function() {
    // Use sendBeacon for reliable delivery during page unload
    const data = JSON.stringify({ goingOffline: true });
    navigator.sendBeacon('/admin/chat/heartbeat', data);
  });
</script>
