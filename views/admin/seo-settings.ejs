<!-- SEO Settings Page - 2 Column Layout -->
<!-- Using Design System -->

<div class="page-container">
    <div class="admin-two-col">
        <!-- Bal oldal: Forms & Settings -->
        <div>
            <!-- Sitemap Statisztik√°k -->
            <div class="card--data">
                <h3 class="section-title">üìä Sitemap Statisztik√°k</h3>
                <div id="sitemap-stats-container">
                    <p class="text-center">‚è≥ Bet√∂lt√©s...</p>
                </div>
            </div>

            <!-- Sitemap Be√°ll√≠t√°sok -->
            <div class="card--data">
                <h3 class="section-title">
                    üó∫Ô∏è Sitemap Be√°ll√≠t√°sok
                </h3>
                
                <div class="form__group">
                    <!-- Sitemap Enabled -->
                    <div class="form__switch-row">
                        <span class="form__switch-row-label">Sitemap gener√°l√°s</span>
                        <input type="checkbox" 
                               class="form-switch-input"
                               data-setting="sitemap-enabled"
                               data-label="Sitemap gener√°l√°s"
                               <%= settings.sitemapEnabled ? 'checked' : '' %> 
                               onchange="toggleSetting(this)">
                    </div>
                    
                    <!-- Auto Generate -->
                    <div class="form__switch-row">
                        <span class="form__switch-row-label">Automatikus gener√°l√°s (napi 2:00)</span>
                        <input type="checkbox" 
                               class="form-switch-input"
                               data-setting="auto-generate"
                               data-label="Automatikus gener√°l√°s"
                               <%= settings.autoGenerate ? 'checked' : '' %> 
                               onchange="toggleSetting(this)">
                    </div>
                    
                    <!-- Ping Enabled -->
                    <div class="form__switch-row">
                        <span class="form__switch-row-label">Keres≈ëmotorok automatikus √©rtes√≠t√©se</span>
                        <input type="checkbox" 
                               class="form-switch-input"
                               data-setting="ping-enabled"
                               data-label="Keres≈ëmotor √©rtes√≠t√©s"
                               <%= settings.pingEnabled ? 'checked' : '' %> 
                               onchange="toggleSetting(this)">
                    </div>
                </div>

                <div class="btn__group btn__group--equal mt-3">
                    <button type="button" class="btn btn--primary" onclick="generateSitemap()">
                        üîÑ Sitemap Gener√°l√°s
                    </button>
                    <button type="button" class="btn btn--secondary" onclick="pingSearchEngines()">
                        üì° Keres≈ëmotorok √ârtes√≠t√©se
                    </button>
                    <button type="button" class="btn btn--secondary" onclick="showSitemapPreview()">
                        üëÅÔ∏è El≈ën√©zet
                    </button>
                </div>
            </div>

            <!-- Robots.txt Statisztik√°k -->
            <div class="card--data">
                <h3 class="section-title">üìä Robots.txt Statisztik√°k</h3>
                <div id="robots-stats-container">
                    <p class="text-center">‚è≥ Bet√∂lt√©s...</p>
                </div>
            </div>

            <!-- Robots.txt Be√°ll√≠t√°sok -->
            <div class="card--data">
                <h3 class="section-title">
                    ü§ñ Robots.txt Be√°ll√≠t√°sok
                </h3>
                
                <div class="form__group">
                    <!-- Robots.txt Enabled -->
                    <div class="form__switch-row">
                        <span class="form__switch-row-label">Robots.txt dinamikus gener√°l√°s</span>
                        <input type="checkbox" 
                               class="form-switch-input"
                               data-setting="robots-enabled"
                               data-label="Robots.txt gener√°l√°s"
                               <%= settings.robotsTxtEnabled ? 'checked' : '' %> 
                               onchange="toggleSetting(this)">
                    </div>
                </div>

                <div class="btn__group btn__group--equal mb-4">
                    <button type="button" class="btn btn--secondary" onclick="showRobotsPreview()">
                        üëÅÔ∏è Robots.txt El≈ën√©zet
                    </button>
                </div>
            </div>

            <!-- Google Tag Manager -->
            <div class="card--data">
                <h3 class="section-title">
                    üè∑Ô∏è Google Tag Manager
                </h3>
                
                <form id="google-services-form">
                    <div class="form__group">
                        <label class="form__label" for="googleTagManagerId">
                            Google Tag Manager ID
                        </label>
                        <input 
                            type="text" 
                            name="googleTagManagerId"
                            id="googleTagManagerId"
                            class="form__control"
                            value="<%= settings.googleTagManagerId %>"
                            placeholder="GTM-XXXXXXX"
                        >
                        <small class="form__hint">
                            Pl: GTM-ABC1234 - Ez kezeli az √∂sszes tracking-et (GA4, Meta Pixel, stb.)
                        </small>
                    </div>
                    
                    <div class="btn__group btn__group--equal mb-4">
                        <button type="submit" class="btn btn--primary">
                            üíæ GTM Ment√©se
                        </button>
                    </div>
                </form>
            </div>

            <!-- 3. SEO Kulcsszavak -->
            <div class="card--data">
                <h3 class="section-title">
                    üîë SEO Kulcsszavak
                </h3>
                
                <form id="keywords-form">
                    <div class="form__group">
                        <label class="form__label" for="defaultKeywords">
                            Alap√©rtelmezett SEO Kulcsszavak
                        </label>
                        <textarea 
                            name="defaultKeywords"
                            id="defaultKeywords"
                            class="form__control"
                            rows="4"
                            placeholder="koncert, rendezv√©ny, el≈ëad√≥, fell√©p≈ë..."
                        ><%= settings.defaultKeywords || 'koncert, rendezv√©ny, el≈ëad√≥, fell√©p≈ë, zen√©sz, esk√ºv≈ë, c√©ges rendezv√©ny' %></textarea>
                        <small class="form__hint">
                            Haszn√°lat: oldal c√≠mek, le√≠r√°sok b≈ëv√≠t√©se, Schema.org (vessz≈ëvel elv√°lasztva)
                        </small>
                    </div>
                    
                    <div class="btn__group btn__group--equal mb-4">
                        <button type="submit" class="btn btn--primary">
                            üíæ Kulcsszavak Ment√©se
                        </button>
                    </div>
                </form>
            </div>
        </div>

        <!-- Jobb oldal: Info Panels -->
        <div>
            <!-- Sitemap Info -->
            <div class="card--data">
                <h3 class="section-title">
                    ‚ÑπÔ∏è Mi az a Sitemap?
                </h3>
                
                <div>
                    <p>
                        <strong>üìÑ Sitemap.xml:</strong><br>
                        XML f√°jl, amely tartalmazza az √∂sszes publikus oldal URL-j√©t. Seg√≠ti a keres≈ëmotorokat az oldal indexel√©s√©ben.
                    </p>
                    
                    <p>
                        <strong>üîÑ Automatikus gener√°l√°s:</strong><br>
                        Ha be van kapcsolva, a rendszer minden √©jjel 2:00-kor automatikusan √∫jragener√°lja a sitemap-et.
                    </p>
                    
                    <p>
                        <strong>üì° Keres≈ëmotor √©rtes√≠t√©s:</strong><br>
                        Ping-eli a Google-t √©s Bing-et, hogy √©rtes√≠tse ≈ëket az √∫j sitemap-r≈ël.
                    </p>
                </div>
            </div>

            <!-- GTM Info -->
            <div class="card--data">
                <h3 class="section-title">
                    üè∑Ô∏è Google Tag Manager
                </h3>
                
                <div>
                    <p>
                        <strong>üéØ Mire j√≥?</strong><br>
                        K√∂zponti kezel√©s minden tracking k√≥dhoz (GA4, Meta Pixel, stb.) k√≥d m√≥dos√≠t√°s n√©lk√ºl.
                    </p>
                    
                    <p>
                        <strong>üí° El≈ëny√∂k:</strong><br>
                        ‚Ä¢ Nincs sz√ºks√©g k√≥d m√≥dos√≠t√°sra<br>
                        ‚Ä¢ K√∂zponti tracking kezel√©s<br>
                        ‚Ä¢ Verzi√≥kezel√©s √©s el≈ën√©zet<br>
                        ‚Ä¢ K√∂nny≈± tesztel√©s
                    </p>
                    
                    <hr class="my-3">
                    
                    <h3 class="section-title">
                        üìã GTM Be√°ll√≠t√°si √ötmutat√≥
                    </h3>
                    
                    <p>
                        <strong>1. Google Tag Manager fi√≥k l√©trehoz√°sa</strong><br>
                        Menj ide: <a href="https://tagmanager.google.com" target="_blank">https://tagmanager.google.com</a><br>
                        Hozz l√©tre egy √∫j fi√≥kot (Account) √©s containert.
                    </p>
                    
                    <p>
                        <strong>2. GTM ID beszerz√©se</strong><br>
                        A GTM Dashboard-on l√°tod a Container ID-t (pl. GTM-ABC1234).
                    </p>
                    
                    <p>
                        <strong>3. ID beilleszt√©se</strong><br>
                        M√°sold be az ID-t a bal oldali mez≈ëbe √©s mentsd el.
                    </p>
                    
                    <p>
                        <strong>4. Tagek hozz√°ad√°sa GTM-ben</strong><br>
                        Ezut√°n a GTM fel√ºlet√©n adhatsz hozz√° Google Analytics, Meta Pixel √©s egy√©b tracking scripteket.
                    </p>
                </div>
            </div>

            <!-- Kulcsszavak Info -->
            <div class="card--data">
                <h3 class="section-title">
                    üí° Kulcsszavak Tippek
                </h3>
                
                <div>
                    <p>
                        <strong>‚úèÔ∏è J√≥ kulcsszavak:</strong><br>
                        ‚Ä¢ Relev√°nsak a szolg√°ltat√°shoz<br>
                        ‚Ä¢ Term√©szetes kifejez√©sek<br>
                        ‚Ä¢ Long-tail kulcsszavak<br>
                        ‚Ä¢ F√∂ldrajzi helynevek
                    </p>
                    
                    <p>
                        <strong>üéØ Haszn√°lat:</strong><br>
                        Ezek a kulcsszavak automatikusan beker√ºlnek a meta keywords tagekbe √©s a Schema.org adatokba.
                    </p>
                    
                    <p>
                        <strong>‚ö†Ô∏è Tipp:</strong><br>
                        Ne t√∫lozd el! 5-10 relev√°ns kulcssz√≥ elegend≈ë.
                    </p>
                </div>
            </div>

            <!-- Robots.txt Info -->
            <div class="card--data">
                <h3 class="section-title">
                    ü§ñ Robots.txt
                </h3>
                
                <div>
                    <p>
                        <strong>ü§ñ Mi az?</strong><br>
                        Sz√∂veges f√°jl, amely megmondja a keres≈ërobotoknak, mit indexelhetnek √©s mit nem.
                    </p>
                    
                    <p>
                        <strong>üîß Dinamikus gener√°l√°s:</strong><br>
                        A rendszer automatikusan gener√°lja a robots.txt-et a be√°ll√≠t√°sok alapj√°n.
                    </p>
                </div>
            </div>

            <!-- SEO Tippek -->
            <div class="card--data">
                <h3 class="section-title">
                    ‚≠ê SEO Tippek
                </h3>
                
                <div>
                    <p>
                        <strong>‚úÖ Sitemap:</strong><br>
                        Minden √∫j tartalomn√°l gener√°lj √∫j sitemap-et √©s √©rtes√≠tsd a keres≈ëmotorokat.
                    </p>
                    
                    <p>
                        <strong>üîç Google Search Console:</strong><br>
                        Add hozz√° az oldalt a Search Console-hoz √©s k√ºldd be a sitemap-et.
                    </p>
                    
                    <p>
                        <strong>üìä GTM Testing:</strong><br>
                        Haszn√°ld a GTM Preview m√≥dj√°t a tagek tesztel√©s√©hez √©les k√∂rnyezet el≈ëtt.
                    </p>
                    
                    <p>
                        <strong>‚è∞ Automatiz√°l√°s:</strong><br>
                        Kapcsold be az automatikus sitemap gener√°l√°st a rendszeres friss√≠t√©shez.
                    </p>
                </div>
            </div>
        </div>
        <!-- /.jobb oldal -->
    </div>
    <!-- /.admin-two-col -->
</div>
<!-- /.page-container -->

<script src="/js/design-system/modal.js"></script>
<script>
const csrfToken = '<%= csrfToken %>';
let robotsModal = null;
let sitemapModal = null;

// Toggle setting AJAX h√≠v√°ssal (haszn√°lja a glob√°lis showAlert()-et)
async function toggleSetting(checkbox) {
    const setting = checkbox.dataset.setting;
    const label = checkbox.dataset.label;
    const newValue = checkbox.checked;
    const originalState = !newValue;
    
    // Optimistic UI update m√°r megt√∂rt√©nt (checkbox √°tv√°ltott)
    checkbox.disabled = true;
    
    try {
        const response = await fetch(`/admin/seo/toggle/${setting}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-Token': csrfToken
            },
            body: JSON.stringify({ value: newValue })
        });
        
        const data = await response.json();
        
        if (data.success) {
            showAlert('success', `‚úÖ ${label}: ${newValue ? 'Bekapcsolva' : 'Kikapcsolva'}`);
        } else {
            // Hiba eset√©n vissza√°ll√≠tjuk az eredeti √°llapotot
            checkbox.checked = originalState;
            showAlert('error', `‚ùå ${data.message || 'Hiba t√∂rt√©nt'}`);
        }
    } catch (error) {
        // Hiba eset√©n vissza√°ll√≠tjuk
        checkbox.checked = originalState;
        showAlert('error', '‚ùå H√°l√≥zati hiba t√∂rt√©nt');
    } finally {
        checkbox.disabled = false;
    }
}

async function generateSitemap() {
    const btn = event.target;
    const originalText = btn.innerHTML;
    
    btn.disabled = true;
    btn.innerHTML = 'üîÑ Gener√°l√°s...';
    
    try {
        const response = await fetch('/admin/seo/generate-sitemap', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-Token': csrfToken
            }
        });
        
        const data = await response.json();
        
        if (data.success) {
            showAlert('success', `‚úÖ ${data.message}`);
            setTimeout(() => loadSitemapStats(), 500);
        } else {
            showAlert('error', `‚ùå ${data.message}`);
        }
    } catch (error) {
        showAlert('error', '‚ùå H√°l√≥zati hiba t√∂rt√©nt');
    } finally {
        btn.disabled = false;
        btn.innerHTML = originalText;
    }
}

async function pingSearchEngines() {
    const btn = event.target;
    const originalText = btn.innerHTML;
    
    btn.disabled = true;
    btn.innerHTML = 'üì° √ârtes√≠t√©s...';
    
    try {
        const response = await fetch('/admin/seo/ping-search-engines', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-Token': csrfToken
            }
        });
        
        const data = await response.json();
        
        if (data.success) {
            showAlert('success', `‚úÖ ${data.message}`);
        } else {
            showAlert('error', `‚ùå ${data.message}`);
        }
    } catch (error) {
        showAlert('error', '‚ùå H√°l√≥zati hiba t√∂rt√©nt');
    } finally {
        btn.disabled = false;
        btn.innerHTML = originalText;
    }
}

document.getElementById('google-services-form').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const submitBtn = this.querySelector('button[type="submit"]');
    const originalBtnText = submitBtn.innerHTML;
    
    submitBtn.disabled = true;
    submitBtn.innerHTML = '‚è≥ Ment√©s...';
    
    const formData = new FormData(this);
    const data = Object.fromEntries(formData);
    
    try {
        const response = await fetch('/admin/seo/settings', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-Token': csrfToken
            },
            body: JSON.stringify(data)
        });
        
        const result = await response.json();
        
        if (result.success) {
            showAlert('success', `‚úÖ ${result.message || 'Google Tag Manager ID sikeresen mentve'}`);
        } else {
            showAlert('error', `‚ùå ${result.message || 'Hiba t√∂rt√©nt a ment√©s sor√°n'}`);
        }
    } catch (error) {
        showAlert('error', '‚ùå H√°l√≥zati hiba t√∂rt√©nt');
    } finally {
        submitBtn.disabled = false;
        submitBtn.innerHTML = originalBtnText;
    }
});

document.getElementById('keywords-form').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const submitBtn = this.querySelector('button[type="submit"]');
    const originalBtnText = submitBtn.innerHTML;
    
    submitBtn.disabled = true;
    submitBtn.innerHTML = '‚è≥ Ment√©s...';
    
    const formData = new FormData(this);
    const data = Object.fromEntries(formData);
    
    try {
        const response = await fetch('/admin/seo/settings', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-Token': csrfToken
            },
            body: JSON.stringify(data)
        });
        
        const result = await response.json();
        
        if (result.success) {
            showAlert('success', `‚úÖ ${result.message || 'SEO kulcsszavak sikeresen mentve'}`);
        } else {
            showAlert('error', `‚ùå ${result.message || 'Hiba t√∂rt√©nt a ment√©s sor√°n'}`);
        }
    } catch (error) {
        showAlert('error', '‚ùå H√°l√≥zati hiba t√∂rt√©nt');
    } finally {
        submitBtn.disabled = false;
        submitBtn.innerHTML = originalBtnText;
    }
});

async function showRobotsPreview() {
    const statsContainer = document.getElementById('robots-stats-container');
    const content = '<pre id="robots-content" class="text-center">üîÑ Bet√∂lt√©s...</pre>';
    
    const footer = `
        <a href="/robots.txt" target="_blank" class="btn btn--primary">üîó √âl≈ë Robots.txt</a>
        <button type="button" class="btn btn--secondary modal-robots-close">Bez√°r√°s</button>
    `;
    
    robotsModal = Modal.create({
        title: 'ü§ñ Robots.txt El≈ën√©zet',
        content: content,
        footer: footer,
        size: 'lg'
    });
    
    robotsModal.open();
    
    // Bind close button
    setTimeout(() => {
        const closeBtn = robotsModal.modalElement.querySelector('.modal-robots-close');
        if (closeBtn) {
            closeBtn.addEventListener('click', () => robotsModal.close());
        }
    }, 0);
    
    try {
        const response = await fetch('/admin/seo/robots-preview');
        const data = await response.json();
        
        if (data.success) {
            let statsHtml = '';
            
            if (data.stats) {
                const stats = data.stats;
                statsHtml = `
                    <div class="stats-grid">
                        <div class="card--stat card--stat--info">
                            <h3>üìÑ Sorok</h3>
                            <div class="stat-value">${stats.totalLines}</div>
                        </div>
                        <div class="card--stat card--stat--primary">
                            <h3>ü§ñ User-agents</h3>
                            <div class="stat-value">${stats.userAgents}</div>
                        </div>
                        <div class="card--stat card--stat--error">
                            <h3>üö´ Disallow</h3>
                            <div class="stat-value">${stats.disallowRules}</div>
                        </div>
                        <div class="card--stat card--stat--success">
                            <h3>‚úÖ Allow</h3>
                            <div class="stat-value">${stats.allowRules}</div>
                        </div>
                        <div class="card--stat card--stat--warning">
                            <h3>üó∫Ô∏è Sitemaps</h3>
                            <div class="stat-value">${stats.sitemaps}</div>
                        </div>
                        <div class="card--stat card--stat--primary">
                            <h3>üíæ M√©ret</h3>
                            <div class="stat-value">${stats.size} <small>byte</small></div>
                        </div>
                    </div>
                `;
                
                // Update stats on page
                statsContainer.innerHTML = statsHtml;
            }
            
            // Update modal with just the code
            robotsModal.setContent(`<pre>${data.content}</pre>`);
        } else {
            robotsModal.setContent(`<p class="text-error">‚ùå Hiba: ${data.message}</p>`);
            statsContainer.innerHTML = `<p class="text-error">‚ùå Hiba: ${data.message}</p>`;
        }
    } catch (error) {
        robotsModal.setContent(`<p class="text-error">‚ùå Hiba: ${error.message}</p>`);
        statsContainer.innerHTML = `<p class="text-error">‚ùå Hiba: ${error.message}</p>`;
    }
}

async function showSitemapPreview() {
    const statsContainer = document.getElementById('sitemap-stats-container');
    const content = '<pre id="sitemap-content" class="text-center">üîÑ Bet√∂lt√©s...</pre>';
    
    const footer = `
        <a href="/sitemap.xml" target="_blank" class="btn btn--primary">üîó √âl≈ë Sitemap.xml</a>
        <button type="button" class="btn btn--secondary modal-sitemap-close">Bez√°r√°s</button>
    `;
    
    sitemapModal = Modal.create({
        title: 'üìÑ Sitemap.xml El≈ën√©zet',
        content: content,
        footer: footer,
        size: 'lg'
    });
    
    sitemapModal.open();
    
    // Bind close button
    setTimeout(() => {
        const closeBtn = sitemapModal.modalElement.querySelector('.modal-sitemap-close');
        if (closeBtn) {
            closeBtn.addEventListener('click', () => sitemapModal.close());
        }
    }, 0);
    
    try {
        const response = await fetch('/sitemap.xml');
        const text = await response.text();
        
        if (response.ok) {
            const parser = new DOMParser();
            const xmlDoc = parser.parseFromString(text, 'text/xml');
            const urls = xmlDoc.getElementsByTagName('url');
            const lastmod = xmlDoc.getElementsByTagName('lastmod');
            const changefreq = xmlDoc.getElementsByTagName('changefreq');
            const priority = xmlDoc.getElementsByTagName('priority');
            
            let statsHtml = `
                <div class="stats-grid">
                    <div class="card--stat card--stat--primary">
                        <h3>üîó URL-ek</h3>
                        <div class="stat-value">${urls.length}</div>
                    </div>
                    <div class="card--stat card--stat--info">
                        <h3>üìÖ Lastmod</h3>
                        <div class="stat-value">${lastmod.length}</div>
                    </div>
                    <div class="card--stat card--stat--warning">
                        <h3>üîÑ Changefreq</h3>
                        <div class="stat-value">${changefreq.length}</div>
                    </div>
                    <div class="card--stat card--stat--success">
                        <h3>‚≠ê Priority</h3>
                        <div class="stat-value">${priority.length}</div>
                    </div>
                    <div class="card--stat card--stat--primary">
                        <h3>üíæ M√©ret</h3>
                        <div class="stat-value">${(text.length / 1024).toFixed(2)} <small>KB</small></div>
                    </div>
                    <div class="card--stat card--stat--warning">
                        <h3>üìù Karakterek</h3>
                        <div class="stat-value">${text.length.toLocaleString()}</div>
                    </div>
                </div>
            `;
            
            // Update stats on page
            statsContainer.innerHTML = statsHtml;
            
            // Update modal with just the XML
            sitemapModal.setContent(`<pre>${text}</pre>`);
        } else {
            sitemapModal.setContent(`<p class="text-error">‚ùå Hiba: ${response.status}</p>`);
            statsContainer.innerHTML = `<p class="text-error">‚ùå Hiba: ${response.status}</p>`;
        }
    } catch (error) {
        sitemapModal.setContent(`<p class="text-error">‚ùå Hiba: ${error.message}</p>`);
        statsContainer.innerHTML = `<p class="text-error">‚ùå Hiba: ${error.message}</p>`;
    }
}

// Load Robots.txt stats on page load
async function loadRobotsStats() {
    const statsContainer = document.getElementById('robots-stats-container');
    
    try {
        const response = await fetch('/admin/seo/robots-preview');
        const data = await response.json();
        
        if (data.success && data.stats) {
            const stats = data.stats;
            statsContainer.innerHTML = `
                <div class="stats-grid">
                    <div class="card--stat card--stat--info">
                        <h3>üìÑ Sorok</h3>
                        <div class="stat-value">${stats.totalLines}</div>
                    </div>
                    <div class="card--stat card--stat--primary">
                        <h3>ü§ñ User-agents</h3>
                        <div class="stat-value">${stats.userAgents}</div>
                    </div>
                    <div class="card--stat card--stat--error">
                        <h3>üö´ Disallow</h3>
                        <div class="stat-value">${stats.disallowRules}</div>
                    </div>
                    <div class="card--stat card--stat--success">
                        <h3>‚úÖ Allow</h3>
                        <div class="stat-value">${stats.allowRules}</div>
                    </div>
                    <div class="card--stat card--stat--warning">
                        <h3>üó∫Ô∏è Sitemaps</h3>
                        <div class="stat-value">${stats.sitemaps}</div>
                    </div>
                    <div class="card--stat card--stat--primary">
                        <h3>üíæ M√©ret</h3>
                        <div class="stat-value">${stats.size} <small>byte</small></div>
                    </div>
                </div>
            `;
        } else {
            statsContainer.innerHTML = `<p class="text-error">‚ùå Hiba: ${data.message || 'Ismeretlen hiba'}</p>`;
        }
    } catch (error) {
        statsContainer.innerHTML = `<p class="text-error">‚ùå Hiba: ${error.message}</p>`;
    }
}

// Load Sitemap stats on page load
async function loadSitemapStats() {
    const statsContainer = document.getElementById('sitemap-stats-container');
    
    try {
        const response = await fetch('/sitemap.xml');
        const text = await response.text();
        
        if (response.ok) {
            const parser = new DOMParser();
            const xmlDoc = parser.parseFromString(text, 'text/xml');
            const urls = xmlDoc.getElementsByTagName('url');
            const lastmod = xmlDoc.getElementsByTagName('lastmod');
            const changefreq = xmlDoc.getElementsByTagName('changefreq');
            const priority = xmlDoc.getElementsByTagName('priority');
            
            statsContainer.innerHTML = `
                <div class="stats-grid">
                    <div class="card--stat card--stat--primary">
                        <h3>üîó URL-ek</h3>
                        <div class="stat-value">${urls.length}</div>
                    </div>
                    <div class="card--stat card--stat--info">
                        <h3>üìÖ Lastmod</h3>
                        <div class="stat-value">${lastmod.length}</div>
                    </div>
                    <div class="card--stat card--stat--warning">
                        <h3>üîÑ Changefreq</h3>
                        <div class="stat-value">${changefreq.length}</div>
                    </div>
                    <div class="card--stat card--stat--success">
                        <h3>‚≠ê Priority</h3>
                        <div class="stat-value">${priority.length}</div>
                    </div>
                    <div class="card--stat card--stat--primary">
                        <h3>üíæ M√©ret</h3>
                        <div class="stat-value">${(text.length / 1024).toFixed(2)} <small>KB</small></div>
                    </div>
                    <div class="card--stat card--stat--warning">
                        <h3>üìù Karakterek</h3>
                        <div class="stat-value">${text.length.toLocaleString()}</div>
                    </div>
                </div>
            `;
        } else {
            statsContainer.innerHTML = `<p class="text-error">‚ùå Hiba: ${response.status}</p>`;
        }
    } catch (error) {
        statsContainer.innerHTML = `<p class="text-error">‚ùå Hiba: ${error.message}</p>`;
    }
}

window.addEventListener('DOMContentLoaded', () => {
    loadRobotsStats();
    loadSitemapStats();
});
</script>
