<div class="page-container">

    <% if (messages && (messages.success || messages.error)) { %>
        <% if (messages.success) { %>
            <div class="alert alert-success">
                <%= messages.success %>
            </div>
        <% } %>
        <% if (messages.error) { %>
            <div class="alert alert-error">
                <%= messages.error %>
            </div>
        <% } %>
    <% } %>

    <!-- 2-Column Grid Layout -->
    <div class="admin-two-col">
        
        <!-- Left Column: Cron Jobs List -->
        <div>
            <div id="cron-jobs-list">
                <div class="loading-text">Feladatok bet√∂lt√©se...</div>
            </div>
        </div>

        <!-- Right Column: Info Boxes -->
        <div>
            <!-- Mi az a Cron? -->
            <div class="card--data">
                <h3 class="section-title">‚ùì Mi az a Cron?</h3>
                <div class="card__info-content">
                    <p>A <strong>Cron</strong> egy id≈ëalap√∫ feladat√ºtemez≈ë, amely automatikusan futtat feladatokat megadott id≈ëpontokban.</p>
                    <p><strong>‚è∞ Form√°tum:</strong> <code>perc √≥ra nap h√≥nap h√©t napja</code></p>
                    <p><strong>üìã P√©ld√°k:</strong></p>
                    <ul>
                        <li><code>0 6 * * *</code> - Minden nap 6:00-kor</li>
                        <li><code>*/15 * * * *</code> - 15 percenk√©nt</li>
                        <li><code>0 0 * * 0</code> - Vas√°rnaponk√©nt √©jf√©lkor</li>
                    </ul>
                </div>
            </div>

            <!-- Akt√≠v Feladatok -->
            <div class="card--data">
                <h3 class="section-title">‚úÖ Akt√≠v Feladatok</h3>
                <div class="card__info-content">
                    <p><strong>üîÑ Szinkroniz√°ci√≥k:</strong></p>
                    <ul>
                        <li><strong>üé§ Performer Sync</strong> - El≈ëad√≥k friss√≠t√©se vTiger-b≈ël</li>
                        <li><strong>üåç GeoNames Sync</strong> - Helysz√≠nek friss√≠t√©se</li>
                        <li><strong>üé´ Event Sync</strong> - Esem√©nyek szinkroniz√°l√°sa</li>
                        <li><strong>üìÖ Booking Sync</strong> - Foglal√°sok friss√≠t√©se</li>
                    </ul>
                    <p><strong>üîß Karbantart√°s:</strong></p>
                    <ul>
                        <li><strong>üßπ Daily Maintenance</strong> - Napi cleanup</li>
                        <li><strong>üíæ Daily Backup</strong> - Napi ment√©s</li>
                    </ul>
                </div>
            </div>

            <!-- Manu√°lis Futtat√°s -->
            <div class="card--data">
                <h3 class="section-title">‚ñ∂Ô∏è Manu√°lis Futtat√°s</h3>
                <div class="card__info-content">
                    <p>Egyes feladatokat <strong>azonnal futtathatod</strong> az "‚ñ∂Ô∏è Feladat futtat√°sa" gombbal.</p>
                    <p><strong>üìå Haszn√°ld ezt, ha:</strong></p>
                    <ul>
                        <li>Azonnal friss√≠teni szeretn√©d az adatokat</li>
                        <li>Tesztelni szeretn√©d a feladatot</li>
                        <li>Nem akarsz v√°rni a k√∂vetkez≈ë √ºtemezett fut√°sra</li>
                    </ul>
                    <p><strong>‚ö†Ô∏è Figyelem:</strong> A futtat√°s t√∂bb percig is tarthat!</p>
                </div>
            </div>

            <!-- √útemez√©s M√≥dos√≠t√°sa -->
            <div class="card--data">
                <h3 class="section-title">‚öôÔ∏è √útemez√©s M√≥dos√≠t√°sa</h3>
                <div class="card__info-content">
                    <p><strong>üîò Be/kikapcsol√°s:</strong></p>
                    <ul>
                        <li>A kapcsol√≥ <strong>azonnal menti</strong> az √°llapotot</li>
                        <li>Nem kell k√ºl√∂n ment√©s gomb</li>
                    </ul>
                    <p><strong>‚úèÔ∏è √útemez√©s v√°ltoztat√°sa:</strong></p>
                    <ol>
                        <li>√çrd √°t a Cron kifejez√©st</li>
                        <li>Kattints a <strong>üíæ Ment√©s</strong> gombra</li>
                    </ol>
                    <p>A rendszer automatikusan ellen≈ërzi a Cron kifejez√©s helyess√©g√©t.</p>
                    <p><strong>‚è≠Ô∏è K√∂vetkez≈ë fut√°s</strong> - A rendszer kisz√°molja, mikor fog legk√∂zelebb futni a feladat.</p>
                </div>
            </div>
        </div>

    </div>
</div>

<script src="/js/cron-humanize.js"></script>
<script>
    async function loadCronJobs() {
        const listEl = document.getElementById('cron-jobs-list');
        try {
            listEl.innerHTML = '<div class="loading-text">Feladatok bet√∂lt√©se...</div>';
            
            const response = await fetch('/admin/cron/status');
            const data = await response.json();
            
            if (data.success) {
                listEl.innerHTML = '';
                
                function formatDateNoSeconds(dateStr) {
                    if (!dateStr) return 'Ismeretlen';
                    const d = new Date(dateStr);
                    const y = d.getFullYear();
                    const m = (d.getMonth() + 1).toString().padStart(2, '0');
                    const day = d.getDate().toString().padStart(2, '0');
                    const h = d.getHours().toString().padStart(2, '0');
                    const min = d.getMinutes().toString().padStart(2, '0');
                    return `${y}. ${m}. ${day}. ${h}:${min}`;
                }
                
                // Sort cron jobs alphabetically by name
                const sortedJobs = [...data.cronJobs].sort((a, b) => 
                    a.name.localeCompare(b.name, 'hu')
                );
                
                sortedJobs.forEach(job => {
                    const jobEl = document.createElement('div');
                    jobEl.className = 'card--data';
                    const nextRun = formatDateNoSeconds(job.nextRun);
                    
                    let human = '';
                    if (typeof humanizeCron === 'function') {
                        human = humanizeCron(job.schedule);
                    }
                    
                    // All cron jobs can be run manually
                    const canRun = true;
                    
                    jobEl.innerHTML = `
                        <div class="flex justify-between items-center mb-4">
                            <div class="text-lg font-semibold text-primary">${job.name}</div>
                            <div>
                                <input type="checkbox" 
                                       class="form-switch-input" 
                                       ${job.isActive ? 'checked' : ''} 
                                       onchange="toggleCronJobStatus('${job.id}', this)">
                            </div>
                        </div>
                        
                        ${job.description ? `<div class="text-secondary mb-4 text-sm">${job.description}</div>` : ''}
                        
                        <div class="form__group">
                            <label class="form__label">√útemez√©s:</label>
                            <input type="text" 
                                   class="form-input font-mono"
                                   value="${job.schedule}" 
                                   title="Cron kifejez√©s (pl. 0 6 * * *)" 
                                   onchange="markAsModified(this)">
                        </div>
                        
                        ${human ? `<div class="text-secondary text-sm mb-2">${human}</div>` : ''}
                        
                        <div class="text-secondary text-sm mb-4">
                            K√∂vetkez≈ë fut√°s: <strong>${nextRun}</strong>
                        </div>
                        
                        <div class="btn__group btn__group--equal">
                            ${canRun ? `
                            <button class="btn btn--secondary" onclick="runCronJob('${job.id}', this)">
                                ‚ñ∂Ô∏è Feladat futtat√°sa
                            </button>
                            ` : ''}
                            <button class="btn btn--primary" onclick="saveCronJob('${job.id}', this)" disabled>
                                üíæ Ment√©s
                            </button>
                        </div>
                        
                        <div class="mt-2">
                            ${canRun ? '<div class="run-status text-sm"></div>' : ''}
                            <div class="save-status text-sm"></div>
                            <div class="toggle-status text-sm"></div>
                        </div>
                    `;
                    
                    listEl.appendChild(jobEl);
                });
            } else {
                Modal.alert({
                    title: 'Hiba',
                    message: 'Hiba: ' + data.message,
                    type: 'error'
                });
                listEl.innerHTML = '<div class="loading-text">Bet√∂lt√©si hiba</div>';
            }
        } catch (error) {
            Modal.alert({
                title: 'Hiba',
                message: 'Hiba a feladatok bet√∂lt√©se sor√°n: ' + error.message,
                type: 'error'
            });
            listEl.innerHTML = '<div class="loading-text">H√°l√≥zati hiba</div>';
        }
    }
    
    async function toggleCronJobStatus(jobId, checkboxEl) {
        const jobEl = checkboxEl.closest('.card--data');
        const schedule = jobEl.querySelector('input[type=text]').value;
        const isActive = checkboxEl.checked;
        const statusEl = jobEl.querySelector('.toggle-status');
        
        // Disable checkbox during save
        checkboxEl.disabled = true;
        statusEl.innerHTML = '<span class="text-secondary">Ment√©s...</span>';
        
        try {
            const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
            const response = await fetch('/admin/cron/update', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': csrfToken
                },
                body: JSON.stringify({ id: jobId, schedule, isActive })
            });
            
            const result = await response.json();
            
            if (result.success) {
                showAlert('success', isActive ? 'Cron job aktiv√°lva' : 'Cron job deaktiv√°lva');
                statusEl.innerHTML = '';
                // Reload to update next run time
                await loadCronJobs();
            } else {
                showAlert('error', result.message || 'Ment√©si hiba');
                statusEl.innerHTML = '';
                // Revert checkbox state
                checkboxEl.checked = !isActive;
                checkboxEl.disabled = false;
            }
        } catch (error) {
            console.error('Toggle error:', error);
            showAlert('error', 'Hiba: ' + error.message);
            statusEl.innerHTML = '';
            // Revert checkbox state
            checkboxEl.checked = !isActive;
            checkboxEl.disabled = false;
        }
    }
    
    function markAsModified(element) {
        const jobEl = element.closest('.card--data');
        const saveBtn = jobEl.querySelector('.btn--primary');
        saveBtn.disabled = false;
    }
    
    async function saveCronJob(jobId, btnElement) {
        const jobEl = btnElement.closest('.card--data');
        const schedule = jobEl.querySelector('input[type=text]').value;
        const isActive = jobEl.querySelector('input[type=checkbox]').checked;
        const statusEl = jobEl.querySelector('.save-status');
        
        // Debug
        console.log('Save cron job:', { id: jobId, schedule, isActive });
        
        btnElement.disabled = true;
        statusEl.innerHTML = '<span class="text-secondary">Ment√©s...</span>';
        
        try {
            const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
            const response = await fetch('/admin/cron/update', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': csrfToken
                },
                body: JSON.stringify({ id: jobId, schedule, isActive })
            });
            
            console.log('Response status:', response.status);
            const result = await response.json();
            console.log('Response:', result);
            
            if (result.success) {
                showAlert('success', 'Sikeres ment√©s');
                statusEl.innerHTML = '';
                loadCronJobs();
            } else {
                showAlert('error', result.message || 'Ismeretlen hiba');
                statusEl.innerHTML = '';
                btnElement.disabled = false;
            }
        } catch (e) {
            console.error('Save error:', e);
            showAlert('error', 'Hiba: ' + e.message);
            statusEl.innerHTML = '';
            btnElement.disabled = false;
        }
    }
    
    async function runCronJob(jobId, btnElement) {
        const statusEl = btnElement.parentElement.querySelector('.run-status');
        
        btnElement.disabled = true;
        btnElement.innerHTML = 'Futtat√°s...';
        if (statusEl) {
            statusEl.innerHTML = '<span class="text-secondary">Folyamatban...</span>';
        }
        
        try {
            const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
            const endpointMap = {
                'performer-sync': '/admin/cron/sync/performers',
                'performer-cleanup': '/admin/cleanup/performers',
                'geonames-sync': '/admin/cron/sync/geonames',
                'geonames-stats': '/admin/cron/run/geonames-stats',
                'booking-sync': '/admin/cron/sync/bookings',
                'event-sync': '/admin/cron/sync/events',
                'daily-maintenance': '/admin/cron/run/maintenance',
                'daily-backup': '/admin/cron/run/backup',
                'chat-session-cleanup': '/admin/cron/run/chat-cleanup',
                'blog-scheduled-publish': '/admin/cron/run/blog-publish',
                'admin-heartbeat-cleanup': '/admin/cron/run/admin-heartbeat-cleanup',
                'security-alert-check': '/admin/cron/run/security-alert-check',
                'security-log-cleanup': '/admin/cron/run/security-log-cleanup',
                'infrastructure-health-check': '/admin/cron/run/infrastructure-health',
                'offline-message-email-retry': '/admin/cron/run/offline-email-retry'
            };
            
            const endpoint = endpointMap[jobId];
            if (!endpoint) {
                throw new Error('Ismeretlen feladat t√≠pus');
            }
            
            // Prepare request body (for performer-cleanup, allow custom retention)
            let requestBody = {};
            if (jobId === 'performer-cleanup') {
                // Production: 365 days retention (1 year)
                // For testing, you can temporarily set this to a lower value (e.g., 2)
                requestBody.retentionDays = 365; // PRODUCTION MODE
            }
            
            const response = await fetch(endpoint, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': csrfToken
                },
                body: JSON.stringify(requestBody)
            });
            
            // Check if response is JSON
            const contentType = response.headers.get('content-type');
            if (!contentType || !contentType.includes('application/json')) {
                throw new Error('A szerver nem JSON v√°laszt adott. Lehets√©ges, hogy nincs jogosults√°god vagy a funkci√≥ nem el√©rhet≈ë.');
            }
            
            const result = await response.json();
            
            if (result.success) {
                showAlert('success', result.message || 'Feladat sikeresen lefutott');
                if (statusEl) statusEl.innerHTML = '';
            } else {
                showAlert('error', result.message || 'Futtat√°si hiba');
                if (statusEl) statusEl.innerHTML = '';
            }
        } catch (error) {
            console.error('Run cron job error:', error);
            showAlert('error', error.message || 'H√°l√≥zati hiba t√∂rt√©nt');
            if (statusEl) statusEl.innerHTML = '';
        } finally {
            btnElement.disabled = false;
            btnElement.innerHTML = '‚ñ∂Ô∏è Feladat futtat√°sa';
        }
    }

    // ‚úÖ DESIGN SYSTEM: Uses global showAlert() from admin-alerts.js
    // No local definition needed - automatically available on all admin pages
    
    window.addEventListener('DOMContentLoaded', loadCronJobs);
</script>
