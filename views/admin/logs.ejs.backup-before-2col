<style>
    .log-file {
        background: var(--color-bg-subtle);
        padding: var(--space-4);
        border-radius: var(--radius-lg);
        border-left: 4px solid var(--color-primary);
        cursor: pointer;
        transition: all 0.3s;
    }

    .log-file:hover {
        background: var(--color-bg-muted);
        transform: translateY(-2px);
        box-shadow: var(--shadow-md);
    }

    .log-file.active {
        background: var(--color-primary);
        color: white;
    }

    .log-file-name {
        font-weight: 500;
        margin-bottom: var(--space-1);
    }

    .log-file-info {
        font-size: 0.85rem;
        color: var(--color-text-muted);
    }

    .log-file.active .log-file-info {
        color: rgba(255, 255, 255, 0.8);
    }

    .log-level-info {
        color: #17a2b8;
    }

    .log-level-warn {
        color: #ffc107;
        font-weight: bold;
    }

    .log-level-error {
        color: #dc3545;
        font-weight: bold;
    }

    .btn-warning {
        background: var(--color-warning);
        color: var(--color-text-dark);
        border: none;
        padding: var(--space-2) var(--space-4);
        border-radius: var(--radius-md);
        cursor: pointer;
        font-size: 0.9rem;
        transition: all 0.2s;
    }

    .btn-warning:hover {
        background: var(--color-warning-hover);
        transform: translateY(-1px);
        box-shadow: var(--shadow-sm);
    }

    .alert-warning {
        background: #fff3cd;
        border-left: 4px solid #ffc107;
        padding: var(--space-4);
        border-radius: var(--radius-md);
        color: #856404;
    }

    @media (max-width: 768px) {
        .data-card .card-body > form > div:first-child {
            grid-template-columns: 1fr !important;
        }
    }
</style>

<div class="page-container">
    <div class="page-header">
        <h1 class="page-title">Rendszer Logok</h1>
    </div>

    <!-- Log Settings -->
    <div class="data-card" style="margin-bottom: var(--space-6);">
        <div class="card-header">
            <h2 class="card-title">Log Beállítások</h2>
        </div>
        <div class="card-body">
        <div class="card-body">
            <form id="log-settings-form" style="max-width: 800px;">
                <div style="display: grid; grid-template-columns: 1fr 1fr 1fr; gap: var(--space-6); margin-bottom: var(--space-6);">
                    <div class="form-group">
                        <label for="retentionDays" class="form-label">
                            Megőrzési Idő (napok)
                        </label>
                        <input 
                            type="number" 
                            id="retentionDays" 
                            name="retentionDays" 
                            class="form-input"
                            value="<%= settings.retentionDays %>"
                            min="1"
                            max="365"
                            required
                        >
                        <small class="form-text">Ennél régebbi logok törlődnek</small>
                    </div>
                    
                    <div class="form-group">
                        <label for="rotationInterval" class="form-label">
                            Rotáció Gyakorisága
                        </label>
                        <select 
                            id="rotationInterval" 
                            name="rotationInterval"
                            class="form-select"
                            required
                        >
                            <option value="daily" <%= settings.rotationInterval === 'daily' ? 'selected' : '' %>>Naponta</option>
                            <option value="weekly" <%= settings.rotationInterval === 'weekly' ? 'selected' : '' %>>Hetente</option>
                            <option value="monthly" <%= settings.rotationInterval === 'monthly' ? 'selected' : '' %>>Havonta</option>
                        </select>
                        <small class="form-text">Új fájl létrehozásának gyakorisága</small>
                    </div>
                    
                    <div class="form-group">
                        <label for="maxSizeMB" class="form-label">
                            Max Fájlméret (MB)
                        </label>
                        <input 
                            type="number" 
                            id="maxSizeMB" 
                            name="maxSizeMB"
                            class="form-input"
                            value="<%= settings.maxSizeMB %>"
                            min="1"
                            max="100"
                            required
                        >
                        <small class="form-text">Rotáció ezen méret felett</small>
                    </div>
                </div>
                
                <div style="display: flex; gap: var(--space-3); align-items: center; flex-wrap: wrap;">
                    <button type="submit" class="btn btn-primary">
                        Beállítások Mentése
                    </button>
                    <button type="button" class="btn btn-warning" onclick="manualLogCleanup()">
                        Régi Logok Törlése Most
                    </button>
                    <span id="settings-save-status"></span>
                    <span id="cleanup-status"></span>
                </div>
            </form>
            
            <div class="alert alert-warning" style="margin-top: var(--space-4);">
                <strong>Figyelem:</strong> A rotáció és méret beállítások csak szerver újraindítás után lépnek érvénybe.
            </div>
        </div>
    </div>
    
    <!-- Log Files -->
    <div class="data-card" style="margin-bottom: var(--space-6);">
        <div class="card-header">
            <h2 class="card-title">Log Fájlok</h2>
        </div>
        <div class="card-body">
            <div id="log-files" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: var(--space-4); margin-bottom: var(--space-6);">
                <div style="text-align: center; padding: var(--space-6); color: var(--color-text-muted);">
                    Log fájlok betöltése...
                </div>
            </div>

            <div style="display: grid; grid-template-columns: 140px 1fr auto auto auto; gap: var(--space-3); align-items: center;">
                <select id="level-filter" class="form-select" style="margin-bottom: 0;">
                    <option value="all">Összes szint</option>
                    <option value="info">INFO</option>
                    <option value="warn">WARN</option>
                    <option value="error">ERROR</option>
                </select>
                <input type="text" id="search-box" class="form-input" placeholder="Keresés a logokban..." style="margin-bottom: 0;">
                <button class="btn btn-primary" onclick="applyFilters()">Szűrés</button>
                <button class="btn btn-secondary" onclick="clearFilters()">Törlés</button>
                <button class="btn btn-secondary" onclick="refreshLogs()">Frissítés</button>
            </div>
        </div>
    </div>

    <!-- Log Viewer -->
    <div class="data-card">
        <div class="card-header" id="log-header">
            <h2 class="card-title">Válasszon egy log fájlt a megtekintéshez</h2>
        </div>
        <div class="card-body" style="padding: 0;">
            <div id="log-content" style="background: #1e1e1e; color: #d4d4d4; font-family: 'Consolas', 'Monaco', 'Courier New', monospace; font-size: 0.85rem; line-height: 1.4; padding: var(--space-4); height: 500px; overflow-y: auto; white-space: pre-wrap;">
                <div style="text-align: center; padding: var(--space-8); color: #666; font-style: italic;">
                    Kattintson egy log fájlra a tartalom megjelenítéséhez.
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    let selectedFile = null;
    let originalContent = '';

    // Load log files on page load
    document.addEventListener('DOMContentLoaded', function () {
        loadLogFiles();
        
        // Log settings form submit handler
        document.getElementById('log-settings-form').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const statusEl = document.getElementById('settings-save-status');
            const retentionDays = document.getElementById('retentionDays').value;
            const rotationInterval = document.getElementById('rotationInterval').value;
            const maxSizeMB = document.getElementById('maxSizeMB').value;
            
            statusEl.innerHTML = '<span style="color: var(--color-primary);">Mentés...</span>';
            
            try {
                const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
                const response = await fetch('/admin/logs/settings', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-Token': csrfToken
                    },
                    body: JSON.stringify({ retentionDays, rotationInterval, maxSizeMB })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    statusEl.innerHTML = '<span style="color: var(--color-success);">✅ ' + data.message + '</span>';
                    setTimeout(() => location.reload(), 2000);
                } else {
                    statusEl.innerHTML = '<span style="color: var(--color-error);">❌ Hiba: ' + data.error + '</span>';
                }
            } catch (error) {
                statusEl.innerHTML = '<span style="color: var(--color-error);">❌ Hálózati hiba: ' + error.message + '</span>';
            }
        });
    });

    async function loadLogFiles() {
        try {
            const response = await fetch('/admin/logs/files');
            const data = await response.json();

            const filesContainer = document.getElementById('log-files');

            if (data.success && data.files.length > 0) {
                filesContainer.innerHTML = data.files.map(file => `
                    <div class="log-file" onclick="selectLogFile('${file.name}')">
                        <div class="log-file-name">📄 ${file.name}</div>
                        <div class="log-file-info">
                            💾 ${(file.size / 1024).toFixed(1)} KB | 
                            📅 ${new Date(file.modified).toLocaleString('hu-HU')}
                        </div>
                    </div>
                `).join('');
            } else {
                filesContainer.innerHTML = '<div style="text-align: center; padding: var(--space-6); color: var(--color-text-muted); font-style: italic;">Nincsenek elérhető log fájlok.</div>';
            }
        } catch (error) {
            console.error('Error loading log files:', error);
            document.getElementById('log-files').innerHTML =
                '<div class="alert alert-error">❌ Hiba a log fájlok betöltésekor: ' + error.message + '</div>';
        }
    }

    async function selectLogFile(filename) {
        // Remove active class from all files
        document.querySelectorAll('.log-file').forEach(file => {
            file.classList.remove('active');
        });

        // Add active class to selected file
        event.currentTarget.classList.add('active');

        selectedFile = filename;
        document.getElementById('log-header').innerHTML = `<h2 class="card-title">${filename}</h2>`;

        await loadLogContent();
    }

    async function loadLogContent() {
        if (!selectedFile) return;

        const contentEl = document.getElementById('log-content');
        contentEl.innerHTML = '<div style="text-align: center; padding: var(--space-6); color: var(--color-primary);">Log betöltése...</div>';

        try {
            const level = document.getElementById('level-filter').value;
            const search = document.getElementById('search-box').value.trim();

            const params = new URLSearchParams();
            if (level !== 'all') params.append('level', level);
            if (search) params.append('search', search);

            const response = await fetch(`/admin/logs/content/${encodeURIComponent(selectedFile)}?${params}`);
            const data = await response.json();

            if (data.success) {
                if (data.isStructured && data.entries) {
                    renderStructuredLogs(data.entries, contentEl);
                } else {
                    originalContent = data.content;
                    contentEl.textContent = data.content;
                }

                contentEl.scrollTop = contentEl.scrollHeight;
            } else {
                contentEl.innerHTML = '<div class="alert alert-error">❌ Hiba: ' + data.error + '</div>';
            }
        } catch (error) {
            console.error('Error loading log content:', error);
            contentEl.innerHTML = '<div class="alert alert-error">❌ Hiba a log tartalom betöltésekor: ' + error.message + '</div>';
        }
    }

    function renderStructuredLogs(entries, container) {
        if (entries.length === 0) {
            container.innerHTML = '<div style="text-align: center; padding: var(--space-6); color: var(--color-text-muted);">Nincs megjeleníthető log bejegyzés</div>';
            return;
        }

        container.innerHTML = '';
        
        entries.forEach(entry => {
        const logLine = document.createElement('div');
        logLine.className = 'log-entry';
        logLine.style.cssText = 'padding: 8px 12px; border-bottom: 1px solid #333; font-family: "Courier New", monospace; font-size: 13px;';            let html = `<span style="color: #888;">[${entry.timestamp}]</span> `;
            html += `<span class="${entry.levelClass}" style="font-weight: bold;">${entry.level}</span> `;
            html += `<span>${escapeHtml(entry.message)}</span>`;

            if (entry.details) {
                html += `<div style="margin-left: 20px; margin-top: 4px; color: #888; font-size: 12px;">`;
                html += `<details style="cursor: pointer;">`;
                html += `<summary style="color: #17a2b8;">Részletek</summary>`;
                html += `<pre style="background: #2d2d2d; padding: 8px; border-radius: 4px; margin-top: 4px; overflow-x: auto;">${escapeHtml(JSON.stringify(entry.details, null, 2))}</pre>`;
                html += `</details>`;
                html += `</div>`;
            }

            logLine.innerHTML = html;
            container.appendChild(logLine);
        });
    }

    function escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    function applyFilters() {
        if (selectedFile) {
            loadLogContent();
        }
    }

    function clearFilters() {
        document.getElementById('search-box').value = '';
        document.getElementById('level-filter').value = 'all';
        if (selectedFile) {
            loadLogContent();
        }
    }

    function searchLogs() {
        applyFilters();
    }

    function clearSearch() {
        clearFilters();
    }

    function refreshLogs() {
        loadLogFiles();
        if (selectedFile) {
            setTimeout(() => {
                loadLogContent();
            }, 500);
        }
    }

    // Auto-refresh every 30 seconds
    setInterval(() => {
        if (selectedFile) {
            loadLogContent();
        }
    }, 30000);

    // Enter key support for search
    document.getElementById('search-box').addEventListener('keypress', function (e) {
        if (e.key === 'Enter') {
            applyFilters();
        }
    });

    // Level filter change handler
    document.getElementById('level-filter').addEventListener('change', function () {
        if (selectedFile) {
            loadLogContent();
        }
    });

    // Manual log cleanup function
    async function manualLogCleanup() {
        const statusEl = document.getElementById('cleanup-status');
        const button = event.currentTarget;
        
        button.disabled = true;
        button.textContent = 'Tisztítás folyamatban...';
        statusEl.innerHTML = '';
        
        try {
            const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
            const response = await fetch('/admin/logs/cleanup', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': csrfToken
                }
            });
            
            const data = await response.json();
            
            if (data.success) {
                statusEl.innerHTML = '<span style="color: var(--color-success);">✅ ' + data.message + '</span>';
                setTimeout(() => {
                    loadLogFiles();
                    statusEl.innerHTML = '';
                }, 3000);
            } else {
                statusEl.innerHTML = '<span style="color: var(--color-error);">❌ Hiba: ' + data.error + '</span>';
            }
        } catch (error) {
            statusEl.innerHTML = '<span style="color: var(--color-error);">❌ Hálózati hiba: ' + error.message + '</span>';
        } finally {
            button.disabled = false;
            button.textContent = 'Régi Logok Törlése Most';
        }
    }
</script>