<!-- AI Behavior Settings Page -->
<!-- Design system: admin-two-col layout, card--data, form components -->

<div class="page-container">
    <% if (success) { %>
        <div class="alert alert-success">
            <%= decodeURIComponent(success) %>
        </div>
    <% } %>

    <% if (error) { %>
        <div class="alert alert-error">
            <%= decodeURIComponent(error) %>
        </div>
    <% } %>

    <!-- 2 oszlopos grid (design system standard) -->
    <div class="admin-two-col">
        
        <!-- BAL OSZLOP: Settings Form -->
        <div>
            <form id="ai-behavior-form" method="POST" action="/admin/ai-behavior/update">
                <input type="hidden" name="_csrf" value="<%= csrfToken %>">
                
                <% 
                const categoryMeta = {
                    systemPrompt: { icon: 'ü§ñ', title: 'System Prompt Be√°ll√≠t√°sok', color: 'primary' },
                    personality: { icon: 'üé≠', title: 'Szem√©lyis√©g & Hangnem', color: 'primary' },
                    escalation: { icon: 'üîÑ', title: 'Eszkal√°ci√≥s Szab√°lyok', color: 'warning' },
                    prohibited: { icon: '‚õî', title: 'Tiltott T√©m√°k & Viselked√©sek', color: 'error' },
                    responseStyle: { icon: 'üìù', title: 'V√°lasz St√≠lus', color: 'info' },
                    specialCases: { icon: 'üéØ', title: 'Speci√°lis Helyzetek', color: 'secondary' },
                    privacy: { icon: 'üîí', title: 'Adatv√©delem & GDPR', color: 'success' },
                    salesGuidelines: { icon: 'üí∞', title: '√ârt√©kes√≠t√©si Ir√°nyelvek', color: 'primary' },
                    knowledgeBase: { icon: 'üìö', title: 'Tud√°sb√°zis Tartalom', color: 'info' }
                };
                
                Object.keys(settingsByCategory).forEach(function(category) {
                    const meta = categoryMeta[category] || { icon: '‚öôÔ∏è', title: category, color: 'secondary' };
                    const settings = settingsByCategory[category];
                %>
                
                <!-- <%= meta.title %> -->
                <div class="card--data">
                    <h3 class="section-title">
                        <%= meta.icon %> <%= meta.title %>
                    </h3>
                    
                    <% settings.forEach(function(setting) { 
                        const inputName = category + '__' + setting.settingKey;
                        const inputId = 'setting_' + category + '_' + setting.settingKey;
                        const value = setting.getParsedValue();
                    %>
                    
                    <div class="form__group">
                        <% if (setting.dataType === 'boolean') { %>
                            <!-- Toggle Switch (design system standard) -->
                            <div class="form__label-with-toggle">
                                <label class="form__label" for="<%= inputId %>">
                                    <%= setting.label || setting.settingKey %>
                                </label>
                                <input 
                                    type="checkbox" 
                                    class="form-switch-input"
                                    name="<%= inputName %>" 
                                    id="<%= inputId %>"
                                    value="true"
                                    <%= value ? 'checked' : '' %>
                                />
                            </div>
                            
                        <% } else if (setting.dataType === 'array') { %>
                            <!-- Textarea for arrays (JSON) -->
                            <label for="<%= inputId %>">
                                <%= setting.label || setting.settingKey %>
                            </label>
                            <textarea 
                                class="form__control" 
                                id="<%= inputId %>"
                                name="<%= inputName %>"
                                rows="4"
                                placeholder="Soronk√©nt egy elem"
                                data-type="array"
                            ><%= Array.isArray(value) ? value.join('\n') : value %></textarea>
                            
                        <% } else if (setting.dataType === 'object') { %>
                            <!-- Textarea for objects (JSON) -->
                            <label for="<%= inputId %>">
                                <%= setting.label || setting.settingKey %>
                            </label>
                            <textarea 
                                class="form__control" 
                                id="<%= inputId %>"
                                name="<%= inputName %>"
                                rows="6"
                                placeholder="JSON form√°tum"
                                data-type="object"
                            ><%= typeof value === 'object' ? JSON.stringify(value, null, 2) : value %></textarea>
                            
                        <% } else if (setting.dataType === 'number') { %>
                            <!-- Number input -->
                            <label for="<%= inputId %>">
                                <%= setting.label || setting.settingKey %>
                            </label>
                            <input 
                                type="number" 
                                class="form__control" 
                                id="<%= inputId %>"
                                name="<%= inputName %>"
                                value="<%= value %>"
                            />
                            
                        <% } else { %>
                            <!-- Text input or textarea (default) -->
                            <label for="<%= inputId %>">
                                <%= setting.label || setting.settingKey %>
                            </label>
                            <% if (category === 'knowledgeBase') { %>
                                <!-- Larger textarea for knowledge base content -->
                                <textarea 
                                    class="form__control" 
                                    id="<%= inputId %>"
                                    name="<%= inputName %>"
                                    rows="12"
                                    placeholder="<%= setting.description || '' %>"
                                ><%= value %></textarea>
                            <% } else { %>
                                <!-- Regular text input -->
                                <input 
                                    type="text" 
                                    class="form__control" 
                                    id="<%= inputId %>"
                                    name="<%= inputName %>"
                                    value="<%= value %>"
                                />
                            <% } %>
                        <% } %>
                        
                        <% if (setting.description) { %>
                            <small class="form__hint"><%= setting.description %></small>
                        <% } %>
                    </div>
                    
                    <% }); %>
                </div>
                
                <% }); %>
                
                <!-- Action Buttons (design system standard) -->
                <div class="btn__group btn__group--equal">
                    <button type="submit" class="btn btn--primary">
                        üíæ Ment√©s
                    </button>
                </div>
            </form>
        </div>
        <!-- /.bal oszlop -->

        <!-- JOBB OSZLOP: Info Boxok (design system standard) -->
        <div>
            
            <!-- Mi ez? -->
            <div class="card--data">
                <h3 class="section-title">
                    ü§ñ Mi ez?
                </h3>
                <div class="card__info-content">
                    <p class="mb-3">
                        Az AI viselked√©si szab√°lyok hat√°rozz√°k meg, hogy a chat asszisztens hogyan 
                        viselkedik, milyen t√©m√°kr√≥l besz√©l, √©s mikor tov√°bb√≠t √ºgyeket az √©rt√©kes√≠t≈ëknek.
                    </p>
                    
                    <p><strong>F≈ë kateg√≥ri√°k:</strong></p>
                    <ul class="my-2 pl-5 text-sm">
                        <li class="mb-2">üé≠ <strong>Szem√©lyis√©g:</strong> Hangnem, nyelv, st√≠lus</li>
                        <li class="mb-2">üîÑ <strong>Eszkal√°ci√≥:</strong> Mikor tov√°bb√≠t √©rt√©kes√≠t≈ënek</li>
                        <li class="mb-2">‚õî <strong>Tiltott t√©m√°k:</strong> Mir≈ël NEM besz√©lhet</li>
                        <li class="mb-2">üìù <strong>V√°lasz st√≠lus:</strong> Hogyan form√°zza a v√°laszt</li>
                        <li class="mb-2">üéØ <strong>Speci√°lis esetek:</strong> D√ºh√∂s √ºgyf√©l, √°raj√°nlat, stb.</li>
                        <li class="mb-2">üîí <strong>Adatv√©delem:</strong> GDPR szab√°lyok</li>
                        <li>üí∞ <strong>√ârt√©kes√≠t√©s:</strong> Upselling, kedvezm√©nyek</li>
                    </ul>
                </div>
            </div>

            <!-- Hogyan m≈±k√∂dik? -->
            <div class="card--data">
                <h3 class="section-title">
                    ‚öôÔ∏è Hogyan m≈±k√∂dik?
                </h3>
                <div class="card__info-content">
                    <p><strong>1Ô∏è‚É£ Be√°ll√≠t√°sok ment√©se:</strong></p>
                    <p class="text-sm my-2">
                        A m√≥dos√≠t√°sok azonnal √©letbe l√©pnek. Az AI a k√∂vetkez≈ë besz√©lget√©sekben 
                        m√°r az √∫j szab√°lyokat haszn√°lja.
                    </p>
                    
                    <p class="mt-3"><strong>2Ô∏è‚É£ AI Prompt El≈ën√©zet:</strong></p>
                    <p class="text-sm my-2">
                        A "üëÅÔ∏è AI Prompt El≈ën√©zet" gombbal megtekintheted, hogy a be√°ll√≠t√°sok 
                        hogyan √©p√ºlnek be az AI rendszer√ºzenet√©be.
                    </p>
                    
                    <p class="mt-3"><strong>3Ô∏è‚É£ Teszt:</strong></p>
                    <p class="text-sm my-2">
                        Pr√≥b√°ld ki az AI-t a chat widgetben, √©s figyeld meg, hogyan 
                        alkalmazza az √∫j szab√°lyokat.
                    </p>
                </div>
            </div>

            <!-- Tippek -->
            <div class="card--data">
                <h3 class="section-title">
                    üí° Tippek
                </h3>
                <div class="card__info-content">
                    <ul class="my-2 pl-5 text-sm">
                        <li class="mb-2">
                            <strong>Eszkal√°ci√≥s kulcsszavak:</strong> Add meg azokat a szavakat, 
                            amelyekre az AI azonnal tov√°bb√≠t √©rt√©kes√≠t≈ënek (pl. "foglalni", "szerz≈ëd√©s").
                        </li>
                        <li class="mb-2">
                            <strong>Tiltott t√©m√°k:</strong> Politika, vall√°s, versenyt√°rsak - 
                            ker√ºlje az AI ezeket a t√©m√°kat.
                        </li>
                        <li class="mb-2">
                            <strong>Hangnem:</strong> Bar√°ts√°gos, professzion√°lis, vagy 
                            form√°lis - v√°laszd ki a c√©ged st√≠lus√°t.
                        </li>
                        <li class="mb-2">
                            <strong>GDPR:</strong> Az AI nem k√©r szem√©lyes adatokat k√∂zvetlen√ºl, 
                            csak az ≈±rlapon kereszt√ºl.
                        </li>
                    </ul>
                </div>
            </div>

            <!-- Biztons√°gi figyelmeztet√©s -->
            <div class="card--data">
                <h3 class="section-title">
                    ‚ö†Ô∏è Fontos!
                </h3>
                <div class="card__info-content">
                    <p class="text-error font-bold mb-2">
                        Ezek a szab√°lyok NEM l√°that√≥ak a felhaszn√°l√≥k sz√°m√°ra!
                    </p>
                    <p class="text-sm">
                        A viselked√©si szab√°lyok bels≈ë ir√°nyelvek az AI sz√°m√°ra. 
                        A felhaszn√°l√≥k csak a v√°laszokat l√°tj√°k, nem a szab√°lyokat.
                    </p>
                </div>
            </div>

            <!-- AI Prompt Preview -->
            <div class="card--data">
                <h3 class="section-title">
                    üëÅÔ∏è AI Prompt El≈ën√©zet
                </h3>
                <div class="card__info-content">
                    <button type="button" class="btn btn--secondary btn--block" onclick="previewPrompt()">
                        üîç Teljes Prompt Megtekint√©se
                    </button>
                    <small class="form__hint mt-2 block">
                        N√©zd meg, hogy a viselked√©si szab√°lyok hogyan √©p√ºlnek be az AI prompt-ba.
                    </small>
                </div>
            </div>
        </div>
        <!-- /.jobb oszlop -->
    </div>
</div>

<!-- JavaScript (design system standard - admin-alerts.js haszn√°lata) -->
<script>
// Form submission (AJAX with admin-alerts feedback)
document.getElementById('ai-behavior-form').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const form = this;
    const csrfToken = form.querySelector('input[name="_csrf"]').value;
    const data = {};
    
    // Collect ALL inputs, not just FormData (checkboxes need special handling)
    const inputs = form.querySelectorAll('input[type="text"], input[type="number"], input[type="checkbox"], textarea');
    
    inputs.forEach(input => {
        const name = input.name;
        if (!name || name === '_csrf') return;
        
        if (input.type === 'checkbox') {
            // CRITICAL: Always send boolean for checkboxes (not just when checked)
            data[name] = input.checked;
        } else if (input.tagName === 'TEXTAREA') {
            const value = input.value.trim();
            const dataType = input.getAttribute('data-type');
            
            // Check data-type attribute first (most reliable)
            if (dataType === 'array') {
                // Convert line-separated text to array
                data[name] = value ? value.split('\n').map(line => line.trim()).filter(line => line) : [];
            } else if (dataType === 'object') {
                // Parse as JSON object
                try {
                    data[name] = JSON.parse(value);
                } catch (e) {
                    console.error(`Failed to parse object for ${name}:`, e);
                    data[name] = value; // Fallback to string
                }
            } else if (value.startsWith('{') || value.startsWith('[')) {
                // Legacy: Check if it looks like JSON (for backward compatibility)
                try {
                    data[name] = JSON.parse(value);
                } catch (e) {
                    data[name] = value;
                }
            } else {
                // Plain text (knowledgeBase fields, etc.)
                data[name] = value;
            }
        } else {
            // Regular text/number input
            data[name] = input.value;
        }
    });
    
    try {
        const response = await fetch('/admin/ai-behavior/update', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'X-CSRF-Token': csrfToken
            },
            body: JSON.stringify(data)
        });
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const result = await response.json();
        
        if (result.success) {
            // Use admin-alerts.js (design system standard)
            if (typeof window.showAlert === 'function') {
                window.showAlert('success', result.message || 'Be√°ll√≠t√°sok sikeresen mentve!');
            } else {
                alert('‚úÖ ' + (result.message || 'Be√°ll√≠t√°sok sikeresen mentve!'));
            }
        } else {
            if (typeof window.showAlert === 'function') {
                window.showAlert('error', result.message || 'Hiba t√∂rt√©nt a ment√©s sor√°n');
            } else {
                alert('‚ùå ' + (result.message || 'Hiba t√∂rt√©nt a ment√©s sor√°n'));
            }
        }
    } catch (error) {
        if (typeof window.showAlert === 'function') {
            window.showAlert('error', 'Hiba t√∂rt√©nt: ' + error.message);
        } else {
            alert('‚ùå Hiba t√∂rt√©nt: ' + error.message);
        }
        return false;
    }
});

// Preview full AI prompt
async function previewPrompt() {
    try {
        const csrfToken = document.querySelector('input[name="_csrf"]').value;
        const response = await fetch('/admin/ai-behavior/test', {
            headers: {
                'Accept': 'application/json',
                'X-CSRF-Token': csrfToken
            }
        });
        const result = await response.json();
        
        if (result.success) {
            // Open modal with prompt preview (design system modal)
            const modal = document.createElement('div');
            modal.className = 'modal-backdrop';
            modal.innerHTML = `
                <div class="modal modal-lg">
                    <div class="modal__header">
                        <h3>ü§ñ AI System Prompt Preview</h3>
                        <button class="modal__close" onclick="this.closest('.modal-backdrop').remove()"></button>
                    </div>
                    <div class="modal__body">
                        <h4>üìã Viselked√©si Szab√°lyok:</h4>
                        <pre>${result.behaviorRules}</pre>
                        
                        <h4 class="mt-4">üìö Tud√°sb√°zis:</h4>
                        <pre>${result.knowledgeBase}</pre>
                        
                        <p class="mt-3 text-sm text-secondary">
                            Teljes prompt hossz: <strong>${result.combinedLength}</strong> karakter
                        </p>
                    </div>
                    <div class="modal__footer">
                        <button class="btn btn--secondary" onclick="this.closest('.modal-backdrop').remove()">Bez√°r√°s</button>
                    </div>
                </div>
            `;
            document.body.appendChild(modal);
            
            // Close on backdrop click
            modal.addEventListener('click', function(e) {
                if (e.target === modal) {
                    modal.classList.add('modal-closing');
                    setTimeout(() => modal.remove(), 200);
                }
            });
        }
    } catch (error) {
        if (typeof window.showAlert === 'function') {
            window.showAlert('error', 'Hiba t√∂rt√©nt: ' + error.message);
        }
    }
}
</script>
