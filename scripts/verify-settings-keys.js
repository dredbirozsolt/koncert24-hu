/**
 * Settings Key Verification Script
 *
 * Ellen≈ërzi az adatb√°zisban l√©v≈ë settings kulcsokat √©s
 * megkeresi azokat, amelyek al√°h√∫z√°st tartalmaznak pontok helyett.
 *
 * Haszn√°lat:
 *   node scripts/verify-settings-keys.js           - Ellen≈ërz√©s
 *   node scripts/verify-settings-keys.js --fix     - Jav√≠t√°s
 */

// .env bet√∂lt√©se
require('dotenv').config();

const { Setting } = require('../models');
const { normalizeKey } = require('../utils/sanitizeHelper');

// Constants
const SEPARATOR_LINE = '‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê';
const DASH_LINE = '‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ';

// V√°rt kulcsok (ponttal)
const EXPECTED_KEYS = [
  // General
  'general.domain',
  'general.site_name',

  // Company
  'company.name',
  'company.phone',
  'company.email',
  'company.logo',

  // Email
  'email.method',
  'email.host',
  'email.port',
  'email.secure',
  'email.user',
  'email.password',
  'email.from',
  'email.admin',
  'email.booking',

  // VTiger
  'vtiger.url',
  'vtiger.username',
  'vtiger.access_key',

  // GeoNames
  'geonames.username',

  // Exit Popup
  'exit_popup.enabled',
  'exit_popup.title',
  'exit_popup.message',
  'exit_popup.cta_text',
  'exit_popup.cta_link',
  'exit_popup.trigger_exit_intent',
  'exit_popup.trigger_mobile_exit',
  'exit_popup.trigger_timed',
  'exit_popup.delay',
  'exit_popup.excluded_paths',

  // SEO
  'seo.sitemap.enabled',
  'seo.sitemap.auto_generate',
  'seo.sitemap.ping_enabled',
  'seo.robots_txt_enabled',
  'seo.google_analytics_id',
  'seo.google_search_console',
  'seo.google_tag_manager_id',

  // Backup
  'backup.retention.max_count',
  'backup.retention.max_age_days'
];

// Helper: Categorize settings into correct, problematic, unexpected
function categorizeSettings(allSettings) {
  const correctKeys = [];
  const problematicKeys = [];
  const unexpectedKeys = [];

  for (const setting of allSettings) {
    const { key } = setting;

    if (EXPECTED_KEYS.includes(key)) {
      correctKeys.push({ key, value: setting.value });
      continue; // eslint-disable-line no-continue
    }

    if (key.includes('_') && !key.startsWith('_') && !key.endsWith('_id')) {
      const normalizedKey = normalizeKey(key);

      if (EXPECTED_KEYS.includes(normalizedKey)) {
        problematicKeys.push({
          current: key,
          expected: normalizedKey,
          value: setting.value
        });
      } else {
        unexpectedKeys.push({ key, value: setting.value });
      }
    }
  }

  return { correctKeys, problematicKeys, unexpectedKeys };
}

// Helper: Display categorized results
function displayResults(correctKeys, problematicKeys, unexpectedKeys) {
  console.log('‚úÖ HELYES KULCSOK:');
  console.log(`${DASH_LINE}\n`);
  if (correctKeys.length > 0) {
    correctKeys.forEach((item) => {
      console.log(`  ‚úì ${item.key}`);
      const displayValue = item.value ? `${item.value.substring(0, 50)}...` : '(√ºres)';
      console.log(`    √ârt√©k: ${displayValue}`);
      console.log('');
    });
  } else {
    console.log('  Nincs helyes kulcs (ez gyan√∫s!)');
  }
  console.log(`√ñsszesen: ${correctKeys.length}\n`);

  console.log('‚ùå JAV√çTAND√ì KULCSOK:');
  console.log(`${DASH_LINE}\n`);
  if (problematicKeys.length > 0) {
    problematicKeys.forEach((item) => {
      console.log(`  ‚úó ${item.key}`);
      const displayValue = item.value ? `${item.value.substring(0, 50)}...` : '(√ºres)';
      console.log(`    √ârt√©k: ${displayValue}`);
      console.log('    V√°rhat√≥: ponttal elv√°lasztva (pl. company.name)');
      console.log('');
    });
  } else {
    console.log('  ‚úÖ Nincs jav√≠tand√≥ kulcs!');
  }
  console.log(`√ñsszesen: ${problematicKeys.length}\n`);

  console.log('‚ö†Ô∏è  NEM V√ÅRT KULCSOK (al√°h√∫z√°ssal):');
  console.log(`${DASH_LINE}\n`);
  if (unexpectedKeys.length > 0) {
    unexpectedKeys.forEach((item) => {
      console.log(`  ? ${item.key}`);
      const displayValue = item.value ? `${item.value.substring(0, 50)}...` : '(√ºres)';
      console.log(`    √ârt√©k: ${displayValue}`);
      console.log('');
    });
  } else {
    console.log('  Nincs nem v√°rt kulcs');
  }
  console.log(`√ñsszesen: ${unexpectedKeys.length}\n`);
}

// Helper: Find missing keys
function findMissingKeys(correctKeys, problematicKeys) {
  const existingKeys = [
    ...correctKeys.map((k) => k.key),
    ...problematicKeys.map((k) => k.expected)
  ];
  return EXPECTED_KEYS.filter((k) => !existingKeys.includes(k));
}


async function verifyKeys() {
  console.log('üîç Settings kulcsok ellen≈ërz√©se...\n');

  try {
    // √ñsszes setting lek√©r√©se
    const allSettings = await Setting.findAll();
    console.log(`üìä √ñsszes setting: ${allSettings.length}\n`);

    // Probl√©m√°s kulcsok keres√©se
    const { correctKeys, problematicKeys, unexpectedKeys } = categorizeSettings(allSettings);

    // Eredm√©nyek ki√≠r√°sa
    displayResults(correctKeys, problematicKeys, unexpectedKeys);

    // Hi√°nyz√≥ kulcsok keres√©se
    const missingKeys = findMissingKeys(correctKeys, problematicKeys);

    console.log('‚ùì HI√ÅNYZ√ì KULCSOK:');
    console.log(`${DASH_LINE}\n`);
    if (missingKeys.length > 0) {
      missingKeys.forEach((key) => {
        console.log(`  - ${key}`);
      });
    } else {
      console.log('  ‚úÖ Minden v√°rt kulcs megtal√°lhat√≥!');
    }
    console.log(`√ñsszesen: ${missingKeys.length}\n`);

    return problematicKeys;
  } catch (error) {
    console.error('‚ùå Hiba az ellen≈ërz√©s sor√°n:', error.message);
    throw error;
  }
}

async function processSingleKey(item, stats) {
  try {
    const oldSetting = await Setting.findOne({ where: { key: item.current } });

    if (!oldSetting) {
      console.log(`  ‚ö†Ô∏è  ${item.current} - Nem tal√°lhat√≥ (√°tugorva)`);
      stats.failed += 1;
      return;
    }

    const existingNew = await Setting.findOne({ where: { key: item.expected } });

    if (existingNew) {
      console.log(`  ‚ö†Ô∏è  ${item.expected} - M√°r l√©tezik (r√©gi t√∂rl√©se)`);
      await oldSetting.destroy();
      console.log(`     ‚úì ${item.current} t√∂r√∂lve`);
    } else {
      oldSetting.key = item.expected;
      await oldSetting.save();
      console.log(`  ‚úì ${item.current} ‚Üí ${item.expected}`);
    }

    stats.fixed += 1;
  } catch (error) {
    console.error(`  ‚úó ${item.current} - Hiba:`, error.message);
    stats.failed += 1;
  }
}

async function fixKeys(problematicKeys) {
  console.log('\nüîß Kulcsok jav√≠t√°sa...\n');

  const stats = { fixed: 0, failed: 0 };

  for (const item of problematicKeys) {
    await processSingleKey(item, stats);
  }

  console.log('\nüìä Eredm√©ny:');
  console.log(`  Jav√≠tva: ${stats.fixed}`);
  console.log(`  Sikertelen: ${stats.failed}`);
  console.log(`  √ñsszesen: ${problematicKeys.length}\n`);
}

async function main() {
  const shouldFix = process.argv.includes('--fix');

  console.log(SEPARATOR_LINE);
  console.log('  Settings Key Verification');
  console.log(`${SEPARATOR_LINE}\n`);

  if (shouldFix) {
    console.log('‚öôÔ∏è  M√≥d: JAV√çT√ÅS (--fix)\n');
  } else {
    console.log('‚ÑπÔ∏è  M√≥d: ELLEN≈êRZ√âS (haszn√°ld --fix a jav√≠t√°shoz)\n');
  }

  try {
    const problematicKeys = await verifyKeys();

    if (shouldFix && problematicKeys.length > 0) {
      console.log(`\n${DASH_LINE}\n`);
      await fixKeys(problematicKeys);
    } else if (problematicKeys.length > 0) {
      console.log('\nüí° TIP: Haszn√°ld a --fix param√©tert a jav√≠t√°shoz:');
      console.log('   node scripts/verify-settings-keys.js --fix\n');
    }

    console.log(SEPARATOR_LINE);
    console.log('‚úÖ Ellen≈ërz√©s befejezve');
    console.log(`${SEPARATOR_LINE}\n`);

    process.exit(0);
  } catch (error) {
    console.error('\n‚ùå Kritikus hiba:', error);
    process.exit(1);
  }
}

// Script futtat√°sa
if (require.main === module) {
  main();
}

module.exports = { verifyKeys, fixKeys };
