/**
 * Script: √öj dinamikus be√°ll√≠t√°sok hozz√°ad√°sa
 * - Company address r√©szletes mez≈ëk (Schema.org SEO)
 * - SEO default keywords
 * - √Åltal√°nos locale √©s timezone be√°ll√≠t√°sok
 */

const { Setting } = require('../models');

/**
 * Returns array of new settings to add
 */
function getNewSettings() {
  return [
    // Company address r√©szletek (SEO/Schema.org)
    {
      key: 'company.address_street',
      value: '',
      type: 'string',
      category: 'general',
      description: 'Utca, h√°zsz√°m (Schema.org struktur√°lt adat)'
    },
    {
      key: 'company.address_city',
      value: '',
      type: 'string',
      category: 'general',
      description: 'V√°ros (Schema.org struktur√°lt adat)'
    },
    {
      key: 'company.address_zip',
      value: '',
      type: 'string',
      category: 'general',
      description: 'Ir√°ny√≠t√≥sz√°m (Schema.org struktur√°lt adat)'
    },
    {
      key: 'company.address_country',
      value: 'Magyarorsz√°g',
      type: 'string',
      category: 'general',
      description: 'Orsz√°g (Schema.org struktur√°lt adat)'
    },

    // SEO be√°ll√≠t√°sok
    {
      key: 'seo.default_keywords',
      value: 'koncert, rendezv√©ny, el≈ëad√≥, fell√©p≈ë, zen√©sz, esk√ºv≈ë, c√©ges rendezv√©ny',
      type: 'string',
      category: 'seo',
      description: 'Alap√©rtelmezett SEO kulcsszavak (vessz≈ëvel elv√°lasztva)'
    },

    // √Åltal√°nos nyelvi √©s id≈ëz√≥na be√°ll√≠t√°sok
    {
      key: 'general.locale',
      value: 'hu_HU',
      type: 'string',
      category: 'general',
      description: 'Nyelvi be√°ll√≠t√°s (locale k√≥d, pl. hu_HU, en_US)'
    },
    {
      key: 'general.timezone',
      value: 'Europe/Budapest',
      type: 'string',
      category: 'general',
      description: 'Id≈ëz√≥na be√°ll√≠t√°s (pl. Europe/Budapest)'
    }
  ];
}

/**
 * Processes a single setting (create or skip if exists)
 */
async function processSetting(setting, stats) {
  try {
    const existing = await Setting.findOne({
      where: { key: setting.key }
    });

    if (existing) {
      console.log(`‚è≠Ô∏è  M√°r l√©tezik: ${setting.key}`);
      stats.skipped += 1;
    } else {
      await Setting.create(setting);
      console.log(`‚úÖ L√©trehozva: ${setting.key}`);
      stats.created += 1;
    }
  } catch (error) {
    console.error(`‚ùå Hiba a(z) ${setting.key} l√©trehoz√°sakor:`, error.message);
  }
}

async function addDynamicSettings() {
  try {
    console.log('üîß √öj dinamikus be√°ll√≠t√°sok hozz√°ad√°sa...\n');

    const newSettings = getNewSettings();
    const stats = { created: 0, skipped: 0 };

    for (const setting of newSettings) {
      await processSetting(setting, stats);
    }

    console.log('\n‚úÖ Script befejezve!');
    console.log(`   üìù ${stats.created} √∫j be√°ll√≠t√°s l√©trehozva`);
    console.log(`   ‚è≠Ô∏è  ${stats.skipped} be√°ll√≠t√°s m√°r l√©tezett\n`);

    process.exit(0);
  } catch (error) {
    console.error('‚ùå Hiba t√∂rt√©nt:', error);
    process.exit(1);
  }
}

// Futtat√°s
addDynamicSettings();
