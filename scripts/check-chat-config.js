#!/usr/bin/env node

/**
 * Chat Configuration Checker
 * Ellen≈ërzi a chat rendszer aktu√°lis be√°ll√≠t√°sait
 */

// Set environment
process.env.NODE_ENV = process.env.NODE_ENV || 'development';

// Load models
const { Setting } = require('../models');
const availabilityService = require('../services/availabilityService');

// Constants
const SEPARATOR_LINE = '‚ïê'.repeat(60);
const DASH_LINE = '‚îÄ'.repeat(60);
const NOT_SET = '(nincs be√°ll√≠tva)';
const CHAT_OPENAI_API_KEY = 'chat.openai_api_key';

// Helper: Display chat settings
async function displayChatSettings() {
  console.log('üìä CHAT BE√ÅLL√çT√ÅSOK:');
  console.log(DASH_LINE);

  const chatSettings = [
    'chat.ai_enabled',
    'chat.admin_chat_enabled',
    CHAT_OPENAI_API_KEY,
    'chat.auto_offline_minutes',
    'chat.working_hours_enabled',
    'chat.widget_position',
    'chat.welcome_message',
    'chat.offline_message'
  ];

  for (const key of chatSettings) {
    const setting = await Setting.findOne({ where: { key } });
    let value = setting ? setting.value : NOT_SET;

    // Mask API key
    if (key === CHAT_OPENAI_API_KEY && value && value !== NOT_SET) {
      value = `${value.substring(0, 10)}...${value.substring(value.length - 4)}`;
    }

    // Format boolean
    if (value === 'true') {value = '‚úÖ true';}
    if (value === 'false') {value = '‚ùå false';}

    console.log(`  ${key.padEnd(35)} = ${value}`);
  }

  console.log('');
}

// Helper: Display system status
async function displaySystemStatus() {
  console.log('üîç SYSTEM STATUS:');
  console.log(DASH_LINE);

  const systemStatus = await availabilityService.checkSystemStatus();

  console.log('  AI Service:');
  console.log(`    - El√©rhet≈ë: ${systemStatus.ai.available ? '‚úÖ Igen' : '‚ùå Nem'}`);
  if (systemStatus.ai.reason) {
    console.log(`    - Indok: ${systemStatus.ai.reason}`);
  }

  console.log('  Admin Chat Service:');
  console.log(`    - El√©rhet≈ë: ${systemStatus.adminChat.available ? '‚úÖ Igen' : '‚ùå Nem'}`);
  console.log(`    - Online adminok: ${systemStatus.adminChat.adminCount}`);

  if (systemStatus.adminChat.admins && systemStatus.adminChat.admins.length > 0) {
    console.log('    - Adminok:');
    systemStatus.adminChat.admins.forEach((admin) => {
      const status = admin.isOnline ? 'üü¢' : 'üî¥';
      console.log(`      ${status} ${admin.name} (${admin.email})`);
      console.log(`         Utols√≥ heartbeat: ${admin.lastHeartbeat}`);
    });
  }

  console.log(`  Teljes rendszer m√≥d: ${getModeEmoji(systemStatus.mode)} ${systemStatus.mode}`);
  console.log('');

  return systemStatus;
}

// Helper: Display admin availability
async function displayAdminAvailability() {
  console.log('üë• ADMIN EL√âRHET≈êS√âG:');
  console.log(DASH_LINE);

  const allAdmins = await availabilityService.getAllAdminAvailability();

  if (allAdmins.length === 0) {
    console.log('  ‚ö†Ô∏è  Nincs regisztr√°lt admin availability');
  } else {
    allAdmins.forEach((admin) => {
      const status = admin.isOnline ? 'üü¢ ONLINE' : 'üî¥ OFFLINE';
      console.log(`  ${status} ${admin.adminName} (${admin.adminEmail})`);
      console.log(`    - Admin ID: ${admin.adminId}`);
      console.log(`    - Utols√≥ heartbeat: ${admin.lastHeartbeat}`);
      console.log(`    - Munkaid≈ë be√°ll√≠tva: ${admin.workingHours ? 'Igen' : 'Nem'}`);
      console.log(`    - Auto-offline: ${admin.autoAwayMinutes} perc`);
      console.log(`    - Munkaid≈ëben: ${admin.isInWorkingHours ? 'Igen' : 'Nem'}`);
      console.log('');
    });
  }
}

// Helper: Display offline mode causes
function displayOfflineCauses(aiEnabled, adminChatEnabled, openaiApiKey, systemStatus) {
  console.log('  ‚ö†Ô∏è  A chat OFFLINE m√≥dban m≈±k√∂dik!');
  console.log('');
  console.log('  Lehets√©ges okok:');

  if (!aiEnabled || aiEnabled.value !== 'true') {
    console.log('    ‚ùå AI nincs enged√©lyezve (chat.ai_enabled = false)');
  }

  if (!adminChatEnabled || adminChatEnabled.value !== 'true') {
    console.log('    ‚ùå Admin chat nincs enged√©lyezve (chat.admin_chat_enabled = false)');
  }

  if (!openaiApiKey || !openaiApiKey.value) {
    console.log('    ‚ùå OpenAI API kulcs nincs be√°ll√≠tva');
  }

  if (systemStatus.adminChat.adminCount === 0) {
    console.log('    ‚ùå Nincs el√©rhet≈ë admin (0 online admin)');
  }

  console.log('');
  console.log('  Megold√°s:');
  console.log('    1. L√°togass el: http://localhost:3000/admin/chat/settings');
  console.log('    2. Enged√©lyezd az AI-t vagy Admin chat-et');
  console.log('    3. Ha AI-t haszn√°lsz: add meg az OpenAI API kulcsot');
  console.log('    4. Ha Admin chat-et haszn√°lsz: l√©pj be admin dashboardra');
}

// Helper: Display other modes
function displayOtherModes(mode) {
  if (mode === 'ai_only') {
    console.log('  ‚úÖ A chat AI-only m√≥dban m≈±k√∂dik');
    console.log('  ‚ÑπÔ∏è  Csak AI v√°laszol, adminok nem √©rhet≈ëk el');
  } else if (mode === 'admin_only') {
    console.log('  ‚úÖ A chat admin-only m√≥dban m≈±k√∂dik');
    console.log('  ‚ÑπÔ∏è  Csak adminok v√°laszolnak, AI nincs el√©rhet≈ë');
  } else if (mode === 'full_service') {
    console.log('  ‚úÖ A chat FULL SERVICE m√≥dban m≈±k√∂dik');
    console.log('  ‚ÑπÔ∏è  AI + admin backup is el√©rhet≈ë');
  }
}

// Helper: Display diagnosis
async function displayDiagnosis(systemStatus) {
  console.log('üîß DIAGN√ìZIS:');
  console.log(DASH_LINE);

  const aiEnabled = await Setting.findOne({ where: { key: 'chat.ai_enabled' } });
  const adminChatEnabled = await Setting.findOne({ where: { key: 'chat.admin_chat_enabled' } });
  const openaiApiKey = await Setting.findOne({ where: { key: CHAT_OPENAI_API_KEY } });

  if (systemStatus.mode === 'offline_mode') {
    displayOfflineCauses(aiEnabled, adminChatEnabled, openaiApiKey, systemStatus);
  } else {
    displayOtherModes(systemStatus.mode);
  }

  console.log('');
}

function getModeEmoji(mode) {
  /* eslint-disable camelcase */
  const emojis = {
    full_service: '‚úÖ',
    ai_only: 'ü§ñ',
    admin_only: 'üë§',
    offline_mode: '‚ö†Ô∏è'
  };
  /* eslint-enable camelcase */
  return emojis[mode] || '‚ùì';
}

function displayHeader() {
  console.log(SEPARATOR_LINE);
  console.log('  CHAT KONFIGUR√ÅCI√ì ELLEN≈êRZ√âS');
  console.log(SEPARATOR_LINE);
  console.log('');
}

function displayFooter() {
  console.log(SEPARATOR_LINE);
}

async function checkChatConfig() {
  try {
    displayHeader();

    await displayChatSettings();
    const systemStatus = await displaySystemStatus();
    await displayAdminAvailability();
    await displayDiagnosis(systemStatus);

    displayFooter();

    process.exit(0);
  } catch (error) {
    console.error('‚ùå HIBA:', error.message);
    console.error(error.stack);
    process.exit(1);
  }
}

// Run
checkChatConfig();
